# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import daml_commit_pb2 as daml__commit__pb2


class CommitServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CommitTransaction = channel.unary_unary(
        '/com.digitalasset.kvbc.CommitService/CommitTransaction',
        request_serializer=daml__commit__pb2.CommitRequest.SerializeToString,
        response_deserializer=daml__commit__pb2.CommitResponse.FromString,
        )


class CommitServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CommitTransaction(self, request, context):
    """Commit a transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CommitServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CommitTransaction': grpc.unary_unary_rpc_method_handler(
          servicer.CommitTransaction,
          request_deserializer=daml__commit__pb2.CommitRequest.FromString,
          response_serializer=daml__commit__pb2.CommitResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'com.digitalasset.kvbc.CommitService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
