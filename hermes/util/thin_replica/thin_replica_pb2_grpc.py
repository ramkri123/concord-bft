# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import thin_replica_pb2 as thin__replica__pb2


class ThinReplicaStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ReadState = channel.unary_stream(
        '/com.vmware.concord.thin_replica.ThinReplica/ReadState',
        request_serializer=thin__replica__pb2.ReadStateRequest.SerializeToString,
        response_deserializer=thin__replica__pb2.Data.FromString,
        )
    self.ReadStateHash = channel.unary_unary(
        '/com.vmware.concord.thin_replica.ThinReplica/ReadStateHash',
        request_serializer=thin__replica__pb2.ReadStateHashRequest.SerializeToString,
        response_deserializer=thin__replica__pb2.Hash.FromString,
        )
    self.SubscribeToUpdates = channel.unary_stream(
        '/com.vmware.concord.thin_replica.ThinReplica/SubscribeToUpdates',
        request_serializer=thin__replica__pb2.SubscriptionRequest.SerializeToString,
        response_deserializer=thin__replica__pb2.Data.FromString,
        )
    self.AckUpdate = channel.unary_unary(
        '/com.vmware.concord.thin_replica.ThinReplica/AckUpdate',
        request_serializer=thin__replica__pb2.BlockId.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.SubscribeToUpdateHashes = channel.unary_stream(
        '/com.vmware.concord.thin_replica.ThinReplica/SubscribeToUpdateHashes',
        request_serializer=thin__replica__pb2.SubscriptionRequest.SerializeToString,
        response_deserializer=thin__replica__pb2.Hash.FromString,
        )
    self.Unsubscribe = channel.unary_unary(
        '/com.vmware.concord.thin_replica.ThinReplica/Unsubscribe',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class ThinReplicaServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ReadState(self, request, context):
    """Finite stream which sends the current state that is visible to the Thin Replica client
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReadStateHash(self, request, context):
    """Return the hash of the state at a given block id
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubscribeToUpdates(self, request, context):
    """An endless stream of updates
    The client needs to acknowledge the received updates (AckUpdate) in order to help the server manage data growth
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AckUpdate(self, request, context):
    """The client acknowledges the receipt of updates based on the given block id
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubscribeToUpdateHashes(self, request, context):
    """An endless stream of hashes of updates
    The client can use those hashes to verify the integrity of the data from the other stream
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unsubscribe(self, request, context):
    """Cancel the stream gracefully
    The server will forget the cursor, meaning data can be pruned
    Note: At any given point in time, the client should have only _one_ stream per server open
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ThinReplicaServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ReadState': grpc.unary_stream_rpc_method_handler(
          servicer.ReadState,
          request_deserializer=thin__replica__pb2.ReadStateRequest.FromString,
          response_serializer=thin__replica__pb2.Data.SerializeToString,
      ),
      'ReadStateHash': grpc.unary_unary_rpc_method_handler(
          servicer.ReadStateHash,
          request_deserializer=thin__replica__pb2.ReadStateHashRequest.FromString,
          response_serializer=thin__replica__pb2.Hash.SerializeToString,
      ),
      'SubscribeToUpdates': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeToUpdates,
          request_deserializer=thin__replica__pb2.SubscriptionRequest.FromString,
          response_serializer=thin__replica__pb2.Data.SerializeToString,
      ),
      'AckUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.AckUpdate,
          request_deserializer=thin__replica__pb2.BlockId.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'SubscribeToUpdateHashes': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeToUpdateHashes,
          request_deserializer=thin__replica__pb2.SubscriptionRequest.FromString,
          response_serializer=thin__replica__pb2.Hash.SerializeToString,
      ),
      'Unsubscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Unsubscribe,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'com.vmware.concord.thin_replica.ThinReplica', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
