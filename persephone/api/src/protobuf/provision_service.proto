/* [START declaration] */
syntax = "proto3";
package com.vmware.blockchain.deployment.model;

import "concord_cluster.proto";
import "concord_model.proto";
import "core.proto";
import "orchestration.proto";
/* [END declaration] */

/* [START java_declaration] */
option java_package = "com.vmware.blockchain.deployment.model.jvm";
option java_multiple_files = true;
/* [END java_declaration] */

/* [START messages] */
/**
 * Model definition of Concord cluster placement specification.
 */
message PlacementSpecification {
    enum Type {
        UNSPECIFIED = 0;
        FIXED = 1;
    }

    message PlacementEntry {
        Type type = 1;
        OrchestrationSiteIdentifier site = 2;
    }

    repeated PlacementEntry entries = 1;
}

/**
 * Request definition for operation to create a Concord cluster.
 *
 * @property[header]
 *   message header.
 * @property[cluster_size]
 *   size of the cluster to deploy.
 * @property[model]
 *   versioned Concord model to use for nodes in the cluster.
 * @property[placement]
 *   cluster placement specification.
 */
message CreateClusterRequest {
    MessageHeader header = 1;
    uint32 cluster_size = 2;
    ConcordModelIdentifier model = 3;
    PlacementSpecification placement = 4;
}

/**
 * Response definition for operation to create a Concord cluster.
 *
 * @property[header]
 *   message header.
 * @property[type]
 *   type of event.
 * @property[cluster]
 *   identifier of the cluster.
 * @property[node]
 *   Concord node identifier for node-related events.
 */
message CreateClusterResponseEvent {
    /**
     * Type of [CreateClusterResponseEvent] emitted.
     */
    enum Type {
        NOOP = 0; // Default value, should not be used.
        ACKNOWLEDGED = 1; // Request acknowledged (deployment plan recorded).
        NODE_DEPLOYED = 2; // Node specified by [node] is deployed.
        NODE_ONLINE = 3; // Node specified by [node] is online with lifecycle signal.
        NODE_ACTIVE = 4; // Node specified by [node] is active.
        CLUSTER_ACTIVE = 5; // Cluster is ready and active.
    }

    MessageHeader header = 1;
    Type type = 2;
    ConcordClusterIdentifier cluster = 3;
    ConcordNodeIdentifier node = 4;
}
/* [END messages] */

/* [START services] */
/**
 * Service definition pertaining to operations on Concord cluster provisioning.
 */
service ProvisionService {
    /**
     * Operation to create a cluster based on a [CreateClusterRequest].
     */
    rpc CreateCluster (CreateClusterRequest) returns (stream CreateClusterResponseEvent) {};
}
/* [END services] */
