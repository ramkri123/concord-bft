/* [START declaration] */
syntax = "proto3";
package vmware.blockchain.deployment.v1;
/* [END declaration] */

/* [START java_declaration] */
option java_package = "com.vmware.blockchain.deployment.model";
option java_multiple_files = true;
/* [END java_declaration] */

/* [START messages] */
/**
 * Model definition of a component within a deployment of Concord instance.
 *
 * @property[type]
 *   type of the component.
 * @property[name]
 *   name of the component.
 */
message ConcordComponent {
    /**
     * Denote the types of components that can be installed in a Concord deployment instance.
     */
    enum Type {
        INVALID = 0;
        CONTAINER_IMAGE = 1; // Container image retrievable from a container registry.
    }

    /**
     * Denote the types of component service functions.
     *
     * Note: Well-known service types are explicitly defined whereas a specific Concord model *may*
     * declare additional [ConcordComponent] that does not have a well-known service type, but can
     * nevertheless be deployed in a context-unaware manner provided that the component type and
     * name specifies a reachable artifact.
     */
    enum ServiceType {
        GENERIC = 0; // Service function is unspecified. Useful only to convey information.
        CONCORD = 1;
        ETHEREUM_API = 2;
        DAML_CONCORD = 3;
        DAML_LEDGER_API = 4;
        DAML_EXECUTION_ENGINE = 5;
    }

    Type type = 1;
    ServiceType service_type = 2;
    string name = 3;
}

/**
 * Identifier of a [ConcordModel].
 *
 * @property[low]
 *   lower order bits of a 128-bit identifier;
 * @property[high]
 *   higher order bits of a 128-bit identifier;
 */
message ConcordModelIdentifier {
    uint64 low = 1;
    uint64 high = 2;
}

/**
 * Model definition of a versioned Concord node template specification.
 *
 * @property[version]
 *   version of the model.
 * @property[template]
 *   name of the template base entity to use as housing.
 *
 *   Note: Deployment target (e.g. denoted instance of [OrchestrationSite]) is expected to
 *   translate this value into template entity to be used internally for deployment workflow.
 * @property[components]
 *   Positionally ordered list of components to be deployed within a deployment unit.
 *
 *   Note: Orchestration engine may utilize the sequence order during deployment workflow.
 */
message ConcordModelSpecification {

    enum BlockchainType {
        ETHEREUM = 0; // Using ETHEREUM as default.
        DAML = 1;
        HLF = 2;
    }

    string version = 1;
    string template = 2;
    repeated ConcordComponent components = 3 [packed=false];
    BlockchainType blockchain_type = 4;
}
/* [END messages] */
