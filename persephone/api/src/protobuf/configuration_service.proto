/* [START declaration] */
syntax = "proto3";
package com.vmware.blockchain.deployment.model;

import "node_identity.proto";
import "core.proto";

/* [START java_declaration] */
option java_package = "com.vmware.blockchain.deployment.model";
option java_multiple_files = true;
/* [END java_declaration] */

/* [START messages] */

/**
* Type definition of configuration service request/response
* @property[type]
*   type of service requested
*/
message ConfigurationServiceType {
    enum Type {
        UNKNOWN = 0;
        TLS = 1;
        ETHRPC = 2;
    }
    Type type = 1;
}

/**
 * Model definition for ConfigurationService request.
 *
 * @property[header]
 *   message header.
 * @property[hostIps]
 *   list of host ips for the cluster
 */
message ConfigurationServiceRequest {
    MessageHeader header = 1;
    repeated string hostIps = 2;
}

/**
 * Model definition for metadata server configuration settings.
 *
 * @property[port]
 *   port number to use for server instance.
 * @property[transport_security]
 *   transport security setting.
 */
message ConfigurationServerConfiguration {
    int32 port = 1;
    TransportSecurity transport_security = 2;
}

/**
 * Denote the identifier of a configuration session.
 *
 * @property[identifier]
 *   integer identifier;
 */
message ConfigurationSessionIdentifier {
    int64 identifier = 1;
}

/**
* Denote the node configuration response
*
* @property[componentConfiguration]
*   list of componentconfigurations
*/
message NodeConfigurationResponse {
    repeated ComponentConfiguration componentConfiguration = 1;
}

/**
* Denote the node configuration request
*
* @property[identifier]
*   the session identifier
* @property[node]
*   the node id whose configuration is needed
*/
message NodeConfigurationRequest {
    MessageHeader header = 1;
    ConfigurationSessionIdentifier identifier = 2;
    int32 node = 3;
}

/**
* Denotes ethrpc or tls configuration
*
* @property[type]
*   type of configuration - ethrpc or tls
* @property[config]
*   the configuration file
* @property[identityComponent]
*   the key or certificate identity
*/
message ComponentConfiguration {
    ConfigurationServiceType.Type type = 1;
    string config = 2;
    repeated IdentityComponent identityComponent = 3;
}

/* [END messages] */
/* [START services] */
/**
 * Service definition pertaining to operations on Concord configurations.
 */
service ConfigurationService {
    /**
     * Operation to generate Tls key/certificate pairs for each node in a cluster
     * based on a [TlsConfigurationServiceRequest].
     */
    rpc GenerateConfiguration (ConfigurationServiceRequest) returns (ConfigurationSessionIdentifier);

    /**
    * Operation to get node configuration for given node
    */
    rpc GetNodeConfiguration (NodeConfigurationRequest) returns (NodeConfigurationResponse);
}
/* [END services] */