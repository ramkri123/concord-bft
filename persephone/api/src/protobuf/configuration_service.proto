/* [START declaration] */
syntax = "proto3";
package com.vmware.blockchain.deployment.model;

import "node_identity.proto";
import "core.proto";

/* [START java_declaration] */
option java_package = "com.vmware.blockchain.deployment.model";
option java_multiple_files = true;
/* [END java_declaration] */

/* [START messages] */
/**
 * Model definition for ConfigurationService Tls response.
 *
 * @param[config]
 *   concord configuration
 * @param[identity]
 *   list of identity for each concord node
 */
message TlsConfigurationServiceResponse {
    string config = 1;
    repeated Identity identity = 2;
}

/**
 * Model definition for ConfigurationService Tls request.
 *
 * @param[cert_path]
 *   root path where certificates would be placed
 * @param[hostIps]
 *   list of host ips for the cluster
 */
message TlsConfigurationServiceRequest {
    MessageHeader header = 1;
    string cert_path = 2;
    repeated string hostIps = 3;
}

/**
 * Model definition for ConfigurationService EthRpc request.
 *
 * @param[cert_path]
 *   list of paths where each certificate would be placed
 */
message EthRpcConfigurationServiceRequest {
    MessageHeader header = 1;
    repeated string cert_path = 2;
}

/**
 * Model definition for ConfigurationService EthRpc response.
 *
 * @param[identity]
 *   list of identity for each concord node
 */
message EthRpcConfigurationServiceResponse {
    repeated Identity identity = 1;
}

/**
 * Model definition for metadata server configuration settings.
 *
 * @property[port]
 *   port number to use for server instance.
 * @property[transport_security]
 *   transport security setting.
 */
message ConfigurationServerConfiguration {
    int32 port = 1;
    TransportSecurity transport_security = 2;
}
/* [END messages] */
/* [START services] */
/**
 * Service definition pertaining to operations on Concord configurations.
 */
service ConfigurationService {
    /**
     * Operation to generate Tls key/certificate pairs for each node in a cluster
     * based on a [TlsConfigurationServiceRequest].
     */
    rpc GenerateTlsConfiguration (TlsConfigurationServiceRequest) returns (TlsConfigurationServiceResponse);

    /**
     * Operation to generate EthRpc key/certificate pairs for each node in a cluster
     * based on a [EthRpcConfigurationServiceRequest].
     */
    rpc GenerateEthRpcConfiguration (EthRpcConfigurationServiceRequest) returns (EthRpcConfigurationServiceResponse);
}
/* [END services] */