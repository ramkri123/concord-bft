/* [START declaration] */
syntax = "proto3";
package com.vmware.blockchain.deployment.model;
/* [END declaration] */

/* [START java_declaration] */
option java_package = "com.vmware.blockchain.deployment.model";
option java_multiple_files = true;
/* [END java_declaration] */

/**
 * Common message header for RPC request / response messages.
 *
 * @property[id]
 *   message identifier.
 *   Note: If specified for request, it is the client-supplied token to de-duplicate request(s).
 *         If specified on response, it is reflecting the token specified on request.
 */
message MessageHeader {
    string id = 1;
}

/**
 * Model definition of a public key.
 *
 * @property[algorithm]
 *   algorithm used for the key.
 * @property[base64_encoding]
 *   value of the key in base64 encoding.
 */
message PublicKey {
    string algorithm = 1;
    string base64_encoding = 2;
}

/**
 * Model definition of a service endpoint.
 *
 * @param[address]
 *   address of the server endpoint URI as a string.
 * @param[credential]
 *   credential to present to the endpoint upon connection.
 * @param[transport_security]
 *   transport security setting to use for endpoint connection.
 */
message Endpoint {
    string address = 1;
    Credential credential = 2;
    TransportSecurity transport_security = 3;
}

/**
 * Model definition of a credential.
 *
 * @property[type]
 *   type of the credential.
 * @property[password_credential]
 *   content of password-based credential.
 * @property[token_credential]
 *   content of token-based credential.
 */
message Credential {
    enum Type {
        NONE = 0;
        PASSWORD = 1;
        BEARER = 2;
    }

    Type type = 1;
    PasswordCredential password_credential = 2;
    BearerTokenCredential token_credential = 3;
}

/**
 * Denote a basic authentication credential.
 *
 * @property[username]
 *   login username to present to the endpoint.
 * @property[password]
 *   login password to present to the endpoint.
 */
message PasswordCredential {
    string username = 1;
    string password = 2;
}

/**
 * Denote a token authentication credential.
 *
 * @property[token]
 *   token value to present to the endpoint.
 */
message BearerTokenCredential {
    string token = 1;
}

/**
 * Denote a transport security configuration setting.
 *
 * @property[type]
 *   type of transport security specified.
 * @property[trusted_certificates_url]
 *   file URL for trusted certificates (PEM format).
 * @property[certificate_url]
 *   file URL for local entity's (client or server) certificate (PEM format).
 * @property[private_key_url]
 *   file URL for local entity's (client or server) private key (PEM format).
 */
message TransportSecurity {
    enum Type {
        NONE = 0;
        TLSv1_2 = 1;
    }

    Type type = 1;
    oneof trusted_certificates {
        string trusted_certificates_url = 2;
        string trusted_certificates_data = 3;
    };
    oneof certificate {
        string certificate_url = 4;
        string certificate_data = 5;
    }
    oneof private_key {
        string private_key_url = 6;
        string private_key_data = 7;
    }
}
