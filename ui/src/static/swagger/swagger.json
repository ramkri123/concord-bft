{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "VMware Blockchain API",
    "description" : "A Scalable Byzantine Fault Tolerant Ledger",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "/api",
    "description" : "Local API endpoint"
  } ],
  "tags" : [ {
    "name" : "profiles",
    "description" : "User, Organization and Consortium Management"
  }, {
    "name" : "blockchains",
    "description" : "Blockchain Management"
  }, {
    "name" : "contracts",
    "description" : "Contract Management"
  }, {
    "name" : "ethereum",
    "description" : "Ethereum calls"
  }, {
    "name" : "concord",
    "description" : "Calls to Concord"
  }, {
    "name" : "tasks",
    "description" : "Task Management"
  }, {
    "name" : "deprecated",
    "description" : "Deprecated APIs"
  } ],
  "paths" : {
    "/concord/members" : {
      "summary" : "Blockchain Consensus Membership List",
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "List replicas that are members",
        "operationId" : "memberListGet",
        "responses" : {
          "200" : {
            "description" : "Members",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/concord/blocks" : {
      "summary" : "Blockchain Blocks",
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "List blocks in the chain, most recent first",
        "operationId" : "blockListGet",
        "parameters" : [ {
          "name" : "latest",
          "in" : "query",
          "description" : "Most recent block to start with",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of blocks to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Blocks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/concord/blocks/{index}" : {
      "summary" : "Specific Blockchain Block",
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "Get a specific block, by its number in the chain",
        "operationId" : "blockGet",
        "parameters" : [ {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the block to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Block",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/concord/transactions/{hash}" : {
      "summary" : "Specific Blockchain Block",
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "Get a specific transaction, by its hash",
        "operationId" : "txGet",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "The hash of the index to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/concord/eth" : {
      "summary" : "Ethereum JSON RPC API",
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "List available RPC methods",
        "operationId" : "ethJsonRpcGet",
        "responses" : {
          "200" : {
            "description" : "RPC Method List",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_4"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "deprecated" ],
        "summary" : "Call the named procedure",
        "externalDocs" : {
          "description" : "Ethereum JSON RPC Docs",
          "url" : "https://ethereum.gitbooks.io/frontier-guide/content/rpc.html"
        },
        "operationId" : "ethJsonRpcPost",
        "requestBody" : {
          "description" : "RPC Request",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "id", "jsonrpc", "method", "params" ],
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "jsonrpc" : {
                    "type" : "string"
                  },
                  "method" : {
                    "type" : "string"
                  },
                  "params" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object"
                    }
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object"
        },
        "responses" : {
          "200" : {
            "description" : "RPC Result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/concord/contracts" : {
      "summary" : "Blockchain contracts",
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "List all deployed contracts",
        "operationId" : "contractsGet",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all contracts deployed to concord",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_6"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "deprecated" ],
        "summary" : "Deploy a new contract to concord",
        "operationId" : "contractsPost",
        "requestBody" : {
          "description" : "New contract POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "compiler_version", "constructor_params", "contract_id", "contract_name", "from", "sourcecode", "version" ],
                "type" : "object",
                "properties" : {
                  "contract_id" : {
                    "type" : "string",
                    "description" : "String representing contract id"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "String representing version number of this contract"
                  },
                  "from" : {
                    "type" : "string",
                    "description" : "String representing owners address"
                  },
                  "sourcecode" : {
                    "type" : "string",
                    "description" : "String representing solidity source code of this version"
                  },
                  "contract_name" : {
                    "type" : "string",
                    "description" : "String representing contract name you used to deploy the contract"
                  },
                  "constructor_params" : {
                    "type" : "string",
                    "description" : "String representing constructor parameters needed to deploy this contract, if your contract does not require constructor parameters, set this to \"\""
                  },
                  "compiler_version" : {
                    "type" : "string",
                    "description" : "String representing solc version you used to deploy the contract"
                  },
                  "is_optimize" : {
                    "type" : "boolean",
                    "description" : "True if using the optimizer. False otherwise"
                  },
                  "runs" : {
                    "type" : "string",
                    "description" : "String representing optimize for how many times you intend to run the code"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_1"
        },
        "responses" : {
          "200" : {
            "description" : "Description of deployed contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "properties" : {
                      "contract_id" : {
                        "type" : "string",
                        "description" : "String representing id of this contract"
                      },
                      "version" : {
                        "type" : "string",
                        "description" : "String representing name of this version"
                      },
                      "url" : {
                        "type" : "string",
                        "description" : "The URI representing this specific version"
                      },
                      "error" : {
                        "type" : "string",
                        "description" : "Error message if any error occurred during deployment, null otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/concord/contracts/{contract_id}" : {
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "Get a contract with id `contract_id`",
        "operationId" : "GetContractById",
        "parameters" : [ {
          "name" : "contract_id",
          "in" : "path",
          "description" : "The id of the contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the particular contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_7"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/concord/contracts/{contract_id}/versions/{version_name}" : {
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "Get a contract identified by given `contract_id` and `version_name`",
        "operationId" : "GetContractByIdAndVersion",
        "parameters" : [ {
          "name" : "contract_id",
          "in" : "path",
          "description" : "The id of the contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "version_name",
          "in" : "path",
          "description" : "Name of the version of contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All details of a particular version of this particular contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/concord/contracts/{contract_address}" : {
      "put" : {
        "tags" : [ "deprecated" ],
        "summary" : "Verify a contract identified by given `contract_address`",
        "operationId" : "PutContractByIdAndVersion",
        "parameters" : [ {
          "name" : "contract_address",
          "in" : "path",
          "description" : "The address of the contract",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Verify contract PUT request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "compiler_version", "contract_id", "contract_name", "sourcecode" ],
                "type" : "object",
                "properties" : {
                  "contract_id" : {
                    "type" : "string",
                    "description" : "String representing contract name"
                  },
                  "compiler_version" : {
                    "type" : "string",
                    "description" : "String representing solc version you used to deploy the contract"
                  },
                  "sourcecode" : {
                    "type" : "string",
                    "description" : "String representing solidity source code of this version"
                  },
                  "contract_name" : {
                    "type" : "string",
                    "description" : "String representing contract name you used to deploy the contract"
                  },
                  "is_optimize" : {
                    "type" : "boolean",
                    "description" : "True if using the optimizer. False otherwise"
                  },
                  "runs" : {
                    "type" : "string",
                    "description" : "String representing optimize for how many times you intend to run the code"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_2"
        },
        "responses" : {
          "200" : {
            "description" : "All details of a particular version of this particular contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/blockchains" : {
      "summary" : "Blockchain",
      "get" : {
        "tags" : [ "blockchains" ],
        "summary" : "List all blockchains",
        "operationId" : "getBlockchains",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all accessible blockchains",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_9"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "blockchains" ],
        "summary" : "Create a new blockchain",
        "operationId" : "blockchainPost",
        "requestBody" : {
          "description" : "New blockchain POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "c_count", "concortium_id", "deployment_type", "f_count" ],
                "type" : "object",
                "properties" : {
                  "consortium_id" : {
                    "type" : "string",
                    "description" : "ID of owning consortium",
                    "format" : "uuid"
                  },
                  "f_count" : {
                    "type" : "integer",
                    "description" : "Number of f replicas, cluster size will be 3f + 2c + 1"
                  },
                  "c_count" : {
                    "type" : "integer",
                    "description" : "Number of c replicas, cluster size will be 3f + 2c + 1"
                  },
                  "deployment_type" : {
                    "type" : "string",
                    "description" : "FIXED or UNSPECIFIED, determines site locations",
                    "enum" : [ "FIXED", "UNSPECIFIED" ]
                  },
                  "blockchain_type" : {
                    "type" : "string",
                    "description" : "Type of blockchain node",
                    "enum" : [ "ETHEREUM", "DAML", "HLF" ]
                  },
                  "zone_ids" : {
                    "type" : "array",
                    "description" : "List of zone IDs for replicas.  deployment_type must be FIXED.  Must contain 3f + 2c + 1 elements.\n",
                    "items" : {
                      "type" : "string",
                      "format" : "uuid"
                    }
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_3"
        },
        "responses" : {
          "202" : {
            "description" : "Returns the deployment task ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/zones" : {
      "summary" : "Deployment zones for blockchains",
      "get" : {
        "tags" : [ "blockchains" ],
        "summary" : "Get available zones",
        "operationId" : "getBlockchainZones",
        "responses" : {
          "200" : {
            "description" : "List of available zones",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BaseZoneGet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Error Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Error Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "blockchains" ],
        "summary" : "Create a new new zone, or refresh zones",
        "description" : "Create a new on-premises zone as defined",
        "operationId" : "createBlockchainOnpremZones",
        "parameters" : [ {
          "name" : "action",
          "in" : "query",
          "description" : "Refresh zones instead of creating",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "reload" ]
          }
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/CreateZoneRequst"
        },
        "responses" : {
          "200" : {
            "description" : "Get Zone information details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Zone"
                }
              }
            }
          },
          "400" : {
            "description" : "Error Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/zones/{zone_id}" : {
      "get" : {
        "tags" : [ "blockchains" ],
        "summary" : "Get Zone Details",
        "operationId" : "getOnpremZones",
        "parameters" : [ {
          "name" : "zone_id",
          "in" : "path",
          "description" : "The id of the on-premises zone to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get Zone information details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Zone"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "blockchains" ],
        "summary" : "Delete an on-premises zone",
        "description" : "Delete an on-premises zone",
        "operationId" : "DeleteOnpremZones",
        "parameters" : [ {
          "name" : "zone_id",
          "in" : "path",
          "description" : "The id of the on-premises zone to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted zone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_10"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "blockchains" ],
        "summary" : "Update an on-premises zone",
        "description" : "Update an existing on-premises zone",
        "operationId" : "patchOnpremZones",
        "parameters" : [ {
          "name" : "zone_id",
          "in" : "path",
          "description" : "The id of the on-premises zone to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PatchZoneRequst"
        },
        "responses" : {
          "200" : {
            "description" : "Get Zone information details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Zone"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}" : {
      "summary" : "Blockchain Operations",
      "get" : {
        "tags" : [ "blockchains" ],
        "summary" : "Get Blockchain information",
        "operationId" : "getBlockchain",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the specified blockchain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_11"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/replicas" : {
      "get" : {
        "tags" : [ "blockchains" ],
        "summary" : "Get list of replicas with status",
        "operationId" : "listReplicas",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of replicas and status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_12"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "blockchains" ],
        "summary" : "Start/stop a list of replicas",
        "operationId" : "replicaListStartStop",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "Start/stop",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "start", "stop" ]
          }
        } ],
        "requestBody" : {
          "description" : "Replicas to stop/start",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "node_ids" : {
                    "type" : "array",
                    "description" : "Please use replica_ids",
                    "deprecated" : true,
                    "items" : {
                      "type" : "string",
                      "format" : "uuid"
                    }
                  },
                  "replica_ids" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "format" : "uuid"
                    }
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_4"
        },
        "responses" : {
          "202" : {
            "description" : "Task ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202_1"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/replicas/{replica_id}" : {
      "post" : {
        "tags" : [ "blockchains" ],
        "summary" : "Start/stop a replica",
        "operationId" : "replicaStartStop",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "replica_id",
          "in" : "path",
          "description" : "Replica ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "Start/stop",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "start", "stop" ]
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202_2"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/members" : {
      "summary" : "Blockchain Consensus Membership List",
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "Please use /api/blockchains/{bid}/replicas",
        "operationId" : "memberListGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Members",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/blockchains/{bid}/concord/blocks" : {
      "summary" : "Blockchain Blocks",
      "get" : {
        "tags" : [ "concord" ],
        "summary" : "List blocks in the chain, most recent first",
        "operationId" : "blockListGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "latest",
          "in" : "query",
          "description" : "Most recent block to start with",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of blocks to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Blocks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/blocks/{index}" : {
      "summary" : "Specific Blockchain Block",
      "get" : {
        "tags" : [ "concord" ],
        "summary" : "Get a specific block, by its number in the chain",
        "operationId" : "blockGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the block to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Block",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/transactions/{hash}" : {
      "summary" : "Specific Blockchain Block",
      "get" : {
        "tags" : [ "concord" ],
        "summary" : "Get a specific transaction, by its hash",
        "operationId" : "txGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "hash",
          "in" : "path",
          "description" : "The hash of the index to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/eth" : {
      "summary" : "Ethereum JSON RPC API",
      "post" : {
        "tags" : [ "ethereum" ],
        "summary" : "Call the named procedure",
        "externalDocs" : {
          "description" : "Ethereum JSON RPC Docs",
          "url" : "https://ethereum.gitbooks.io/frontier-guide/content/rpc.html"
        },
        "operationId" : "ethJsonRpcPostBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "RPC Request",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "id", "jsonrpc", "method", "params" ],
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "jsonrpc" : {
                    "type" : "string"
                  },
                  "method" : {
                    "type" : "string"
                  },
                  "params" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object"
                    }
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_5"
        },
        "responses" : {
          "200" : {
            "description" : "RPC Result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/contracts" : {
      "summary" : "Blockchain contracts",
      "get" : {
        "tags" : [ "contracts" ],
        "summary" : "List all deployed contracts",
        "operationId" : "contractsGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of all contracts deployed to concord",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_6"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "contracts" ],
        "summary" : "Deploy a new contract to concord",
        "operationId" : "ContractsPostBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "New contract POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "compiler_version", "contract_id", "contract_name", "from", "sourcecode", "version" ],
                "type" : "object",
                "properties" : {
                  "contract_id" : {
                    "type" : "string",
                    "description" : "String representing contract id"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "String representing version number of this contract"
                  },
                  "from" : {
                    "type" : "string",
                    "description" : "String representing owners address"
                  },
                  "sourcecode" : {
                    "type" : "string",
                    "description" : "String representing solidity source code of this version"
                  },
                  "contract_name" : {
                    "type" : "string",
                    "description" : "String representing contract name you used to deploy the contract"
                  },
                  "constructor_params" : {
                    "type" : "string",
                    "description" : "String representing constructor parameters needed to deploy this contract, if your contract does not require constructor parameters, set this to \"\""
                  },
                  "compiler_version" : {
                    "type" : "string",
                    "description" : "String representing solc version you used to deploy the contract"
                  },
                  "is_optimize" : {
                    "type" : "boolean",
                    "description" : "True if using the optimizer. False otherwise"
                  },
                  "runs" : {
                    "type" : "string",
                    "description" : "String representing optimize for how many times you intend to run the code"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_6"
        },
        "responses" : {
          "200" : {
            "description" : "Description of deployed contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "properties" : {
                      "contract_id" : {
                        "type" : "string",
                        "description" : "String representing id of this contract"
                      },
                      "version" : {
                        "type" : "string",
                        "description" : "String representing name of this version"
                      },
                      "url" : {
                        "type" : "string",
                        "description" : "The URI representing this specific version"
                      },
                      "error" : {
                        "type" : "string",
                        "description" : "Error message if any error occurred during deployment, null otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/contracts/{contract_id}" : {
      "get" : {
        "tags" : [ "contracts" ],
        "summary" : "Get a contract with id `contract_id`",
        "operationId" : "GetContractByIdBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "contract_id",
          "in" : "path",
          "description" : "The id of the contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the particular contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_7"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/contracts/{contract_id}/versions/{version_name}" : {
      "get" : {
        "tags" : [ "contracts" ],
        "summary" : "Get a contract identified by given `contract_id` and `version_name`",
        "operationId" : "GetContractByIdAndVersionBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "contract_id",
          "in" : "path",
          "description" : "The id of the contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "version_name",
          "in" : "path",
          "description" : "Name of the version of contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All details of a particular version of this particular contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/contracts/{contract_address}" : {
      "put" : {
        "tags" : [ "contracts" ],
        "summary" : "Verify a contract identified by given `contract_address`",
        "operationId" : "PutContractByIdAndVersionBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "contract_address",
          "in" : "path",
          "description" : "The address of the contract",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Verify contract PUT request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "compiler_version", "contract_id", "contract_name", "sourcecode" ],
                "type" : "object",
                "properties" : {
                  "contract_id" : {
                    "type" : "string",
                    "description" : "String representing contract name"
                  },
                  "compiler_version" : {
                    "type" : "string",
                    "description" : "String representing solc version you used to deploy the contract"
                  },
                  "sourcecode" : {
                    "type" : "string",
                    "description" : "String representing solidity source code of this version"
                  },
                  "contract_name" : {
                    "type" : "string",
                    "description" : "String representing contract name you used to deploy the contract"
                  },
                  "is_optimize" : {
                    "type" : "boolean",
                    "description" : "True if using the optimizer. False otherwise"
                  },
                  "runs" : {
                    "type" : "string",
                    "description" : "String representing optimize for how many times you intend to run the code"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_7"
        },
        "responses" : {
          "200" : {
            "description" : "All details of a particular version of this particular contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          }
        }
      }
    },
    "/consortiums" : {
      "summary" : "GetConsortium",
      "get" : {
        "tags" : [ "profiles" ],
        "summary" : "List all accessible consortiums",
        "operationId" : "getConsortiums",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all accessible consortiums",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_13"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "profiles" ],
        "summary" : "Creates a new Consortium",
        "operationId" : "consortiumPost",
        "requestBody" : {
          "description" : "New consortium POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "consortium_name", "consortium_type", "organization" ],
                "type" : "object",
                "properties" : {
                  "consortium_name" : {
                    "type" : "string",
                    "description" : "Name of consortium",
                    "format" : "string"
                  },
                  "consortium_type" : {
                    "type" : "string",
                    "description" : "Type of consortium",
                    "format" : "string"
                  },
                  "organization" : {
                    "type" : "string",
                    "description" : "Organization that the consortium is a part of",
                    "format" : "UUID"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_8"
        },
        "responses" : {
          "200" : {
            "description" : "Returns the consortium ID and Name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_14"
                }
              }
            }
          }
        }
      }
    },
    "/consortiums/{con_id}" : {
      "summary" : "GetConsortium_byID",
      "get" : {
        "tags" : [ "profiles" ],
        "summary" : "Get Consortium by its ID",
        "operationId" : "getConsortium",
        "parameters" : [ {
          "name" : "con_id",
          "in" : "path",
          "description" : "Consortium ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the specified consortium",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_15"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "profiles" ],
        "summary" : "Update an existing consortium",
        "operationId" : "consortiumPatch",
        "parameters" : [ {
          "name" : "con_id",
          "in" : "path",
          "description" : "Consortium ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Consortium items to patch",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "consortium_name" : {
                    "type" : "string",
                    "description" : "Name of consortium",
                    "format" : "string"
                  },
                  "consortium_type" : {
                    "type" : "string",
                    "description" : "Type of consortium",
                    "format" : "string"
                  },
                  "orgs_to_add" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "description" : "Organizations to add as members of this consortium",
                      "format" : "uuid"
                    }
                  },
                  "orgs_to_remove" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "description" : "Organizations to remove as members of this consortium",
                      "format" : "uuid"
                    }
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_9"
        },
        "responses" : {
          "200" : {
            "description" : "Returns the Consortium ID and Name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_16"
                }
              }
            }
          }
        }
      }
    },
    "/consortiums/{con_id}/organizations" : {
      "summary" : "Get consortium members",
      "get" : {
        "tags" : [ "profiles" ],
        "summary" : "Get Consortium Members",
        "operationId" : "getConsortiumMembers",
        "parameters" : [ {
          "name" : "con_id",
          "in" : "path",
          "description" : "Consortium ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the members of the specified consortium",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_16_members"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations" : {
      "summary" : "GetOrganization",
      "get" : {
        "tags" : [ "profiles" ],
        "summary" : "List all organizations",
        "operationId" : "getOrganizations",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all organizations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_17"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "deprecated" ],
        "summary" : "Creates a new organization",
        "operationId" : "organizationPost",
        "requestBody" : {
          "description" : "New organization POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "organization_name" ],
                "type" : "object",
                "properties" : {
                  "organization_name" : {
                    "type" : "string",
                    "description" : "Name of organization",
                    "format" : "string"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_10"
        },
        "responses" : {
          "200" : {
            "description" : "Returns the organization ID and Name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_18"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/organizations/{org_id}" : {
      "summary" : "GetOrganization_byid",
      "get" : {
        "tags" : [ "profiles" ],
        "summary" : "Get Organization by its id",
        "operationId" : "getOrganization",
        "parameters" : [ {
          "name" : "org_id",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the specified organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_19"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "deprecated" ],
        "summary" : "Update an existing organization",
        "operationId" : "organizationPatch",
        "parameters" : [ {
          "name" : "org_id",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Organization items to patch",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "Organization_name" : {
                    "type" : "string",
                    "description" : "Updating name of the organization"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_11"
        },
        "responses" : {
          "200" : {
            "description" : "Returns the organization ID and Name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_18"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/tasks" : {
      "summary" : "Get all Tasks",
      "get" : {
        "tags" : [ "tasks" ],
        "summary" : "Get the statuses of all tasks",
        "operationId" : "listTask",
        "responses" : {
          "200" : {
            "description" : "Returns the current task status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tasks" ],
        "summary" : "Get the statuses of listed tasks",
        "operationId" : "getTaskList",
        "parameters" : [ {
          "name" : "get_state",
          "in" : "query",
          "description" : "Get states",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "List of task ids",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "task_ids" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "format" : "uuid"
                    }
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_12"
        },
        "responses" : {
          "200" : {
            "description" : "Returns the current task status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_21"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}" : {
      "summary" : "Tasks",
      "get" : {
        "tags" : [ "tasks" ],
        "summary" : "Get the status of the specified task",
        "operationId" : "getTask",
        "parameters" : [ {
          "name" : "task_id",
          "in" : "path",
          "description" : "Task ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current task status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_20"
                }
              }
            }
          }
        }
      }
    },
    "/users" : {
      "summary" : "Helen User management",
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "Get a list of user which belong to specific organization and specific consortium",
        "operationId" : "usersGet",
        "parameters" : [ {
          "name" : "consortium",
          "in" : "query",
          "description" : "ID of the consortium",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organization",
          "in" : "query",
          "description" : "ID of the organization",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of all users who are part of given consortium and given organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_22"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "deprecated" ],
        "summary" : "Create a new user in Helen",
        "operationId" : "usersPost",
        "requestBody" : {
          "description" : "User creation POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "consortium", "email", "name", "organization", "password", "role" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "String representing name of this user"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "String representing email of this user"
                  },
                  "role" : {
                    "type" : "string",
                    "description" : "String representing role of this user"
                  },
                  "details" : {
                    "$ref" : "#/components/schemas/_users_details"
                  },
                  "consortium" : {
                    "$ref" : "#/components/schemas/_users_consortium_1"
                  },
                  "organization" : {
                    "$ref" : "#/components/schemas/_users_organization_1"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "Password of this user"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_13"
        },
        "responses" : {
          "200" : {
            "description" : "User ID of newly created user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_23"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/users/{user_id}" : {
      "summary" : "Helen User management",
      "get" : {
        "tags" : [ "profiles" ],
        "summary" : "Get the user identified by given user_id",
        "operationId" : "GetUserById",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The id of the user to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a json object describing specified user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_22"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "deprecated" ],
        "summary" : "Update user information",
        "operationId" : "UpdateUser",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The id of the user to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "User PATCH request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "New name of the user"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "New email of the user"
                  },
                  "role" : {
                    "type" : "string",
                    "description" : "New role of the user"
                  },
                  "details" : {
                    "$ref" : "#/components/schemas/_users_user_id_details"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_14"
        },
        "responses" : {
          "200" : {
            "description" : "Successful patch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : { }
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/auth/login" : {
      "summary" : "Helen User management",
      "post" : {
        "tags" : [ "deprecated" ],
        "summary" : "Authenticate a user",
        "operationId" : "AuthenticateUser",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The id of the user to authenticate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Authenticate user POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "password" ],
                "type" : "object",
                "properties" : {
                  "password" : {
                    "type" : "string",
                    "description" : "Password of the user"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_15"
        },
        "responses" : {
          "200" : {
            "description" : "Returns an object with at least an `isAuthenticated` field. If login failed, the value of this field is `false`. If login succeeded, the value of this field is `true`, and the rest of the fields of a user-GET response are also included.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_24"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/auth/change-password" : {
      "summary" : "Change user password",
      "post" : {
        "tags" : [ "deprecated" ],
        "summary" : "Change a user password",
        "operationId" : "ChangePassword",
        "requestBody" : {
          "description" : "Authenticate user POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "email", "password" ],
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string",
                    "description" : "Email of the user"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "New password of the user"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_16"
        },
        "responses" : {
          "200" : {
            "description" : "Returns an object with at least an `isAuthenticated` field. If login failed, the value of this field is `false`. If login succeeded, the value of this field is `true`, and the rest of the fields of a user-GET response are also included.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_24"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/auth/token" : {
      "summary" : "Refresh auth token",
      "post" : {
        "tags" : [ "deprecated" ],
        "summary" : "Refresh authentication token",
        "operationId" : "RefreshToken",
        "requestBody" : {
          "description" : "Refresh authentication token",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "refresh_token" ],
                "type" : "object",
                "properties" : {
                  "refresh_token" : {
                    "type" : "string",
                    "description" : "Token needed to generate new authentication token."
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_17"
        },
        "responses" : {
          "200" : {
            "description" : "Returns an object with a token, token_expires and refresh_token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_25"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/oauth/token" : {
      "summary" : "Return token information of logged in user",
      "get" : {
        "tags" : [ "profiles" ],
        "operationId" : "OauthToken",
        "responses" : {
          "200" : {
            "description" : "Returns information of the currently logged in user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_26"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Error" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "description" : "Error Code"
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "Localized error message"
          },
          "status" : {
            "type" : "integer",
            "description" : "HTTP status code"
          },
          "path" : {
            "type" : "string",
            "description" : "URI causing error"
          }
        }
      },
      "BaseZone" : {
        "required" : [ "name", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "example" : "ON_PREM",
            "enum" : [ "VMC_AWS", "ON_PREM" ]
          },
          "name" : {
            "type" : "string",
            "example" : "VMC SDDC2"
          },
          "latitude" : {
            "type" : "string",
            "example" : "45.2551139"
          },
          "longitude" : {
            "type" : "string",
            "example" : "-120.888727"
          }
        }
      },
      "BaseZoneGet" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "example" : {
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseZone"
        } ]
      },
      "OnPremZonePost" : {
        "required" : [ "folder", "network", "resource_pool", "storage", "vcenter" ],
        "type" : "object",
        "properties" : {
          "vcenter" : {
            "$ref" : "#/components/schemas/PostEndpoint"
          },
          "network" : {
            "$ref" : "#/components/schemas/Network"
          },
          "resouce_pool" : {
            "type" : "string",
            "description" : "name of resource pool to use for deployment",
            "example" : "Resource Pool"
          },
          "storage" : {
            "type" : "string",
            "description" : "name of storage to use for deployment",
            "example" : "Datastore"
          },
          "folder" : {
            "type" : "string",
            "description" : "vCenter folder for deployment",
            "example" : "Blockchain Folder"
          },
          "container_repo" : {
            "$ref" : "#/components/schemas/PostEndpoint"
          }
        },
        "example" : {
          "folder" : "Blockchain Folder",
          "resouce_pool" : "Resource Pool",
          "vcenter" : {
            "password" : "p4$$w0rd",
            "url" : "https://service.com",
            "username" : "user@server.com"
          },
          "storage" : "Datastore",
          "network" : {
            "subnet" : "24",
            "name" : "Blockchain Network",
            "ip_pool" : [ "10.1.1.16-10.1.1.64", "10.1.1.100-10.1.1.200", "10.1.1.253" ],
            "name_servers" : [ "10.1.1.10", "10.1.1.11" ],
            "gateway" : "10.1.1.124"
          },
          "container_repo" : {
            "password" : "p4$$w0rd",
            "url" : "https://service.com",
            "username" : "user@server.com"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseZone"
        } ]
      },
      "OnPremZoneGet" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Zone ID",
            "format" : "uuid"
          },
          "org_id" : {
            "type" : "string",
            "description" : "Organization ID",
            "format" : "uuid"
          },
          "vcenter" : {
            "$ref" : "#/components/schemas/GetEndpoint"
          },
          "network" : {
            "$ref" : "#/components/schemas/Network"
          },
          "resouce_pool" : {
            "type" : "string",
            "description" : "name of resource pool to use for deployment",
            "example" : "Resource Pool"
          },
          "storage" : {
            "type" : "string",
            "description" : "name of storage to use for deployment",
            "example" : "Datastore"
          },
          "folder" : {
            "type" : "string",
            "description" : "vCenter folder for deployment",
            "example" : "Blockchain Folder"
          },
          "container_repo" : {
            "$ref" : "#/components/schemas/GetEndpoint"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseZone"
        } ]
      },
      "Zone" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/OnPremZoneGet"
        } ]
      },
      "PostEndpoint" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "URL of endpoint",
            "example" : "https://service.com"
          },
          "username" : {
            "type" : "string",
            "description" : "Username for credentials",
            "example" : "user@server.com"
          },
          "password" : {
            "type" : "string",
            "description" : "Password for credentials",
            "example" : "p4$$w0rd"
          }
        },
        "example" : {
          "password" : "p4$$w0rd",
          "url" : "https://service.com",
          "username" : "user@server.com"
        }
      },
      "GetEndpoint" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "URL of endpoint",
            "example" : "https://service.com"
          },
          "username" : {
            "type" : "string",
            "description" : "Username for credentials",
            "example" : "user@server.com"
          }
        }
      },
      "Network" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "name of network to use",
            "example" : "Blockchain Network"
          },
          "ip_pool" : {
            "type" : "array",
            "description" : "IP pool list",
            "example" : [ "10.1.1.16-10.1.1.64", "10.1.1.100-10.1.1.200", "10.1.1.253" ],
            "items" : {
              "type" : "string"
            }
          },
          "gateway" : {
            "type" : "string",
            "description" : "Gateway IP address",
            "example" : "10.1.1.124"
          },
          "subnet" : {
            "type" : "string",
            "description" : "IP Subnet",
            "example" : "24"
          },
          "name_servers" : {
            "type" : "array",
            "description" : "List of name servers",
            "example" : [ "10.1.1.10", "10.1.1.11" ],
            "items" : {
              "type" : "string"
            }
          }
        },
        "example" : {
          "subnet" : "24",
          "name" : "Blockchain Network",
          "ip_pool" : [ "10.1.1.16-10.1.1.64", "10.1.1.100-10.1.1.200", "10.1.1.253" ],
          "name_servers" : [ "10.1.1.10", "10.1.1.11" ],
          "gateway" : "10.1.1.124"
        }
      },
      "inline_response_200" : {
        "properties" : {
          "hostname" : {
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "millis_since_last_message" : {
            "type" : "integer"
          },
          "millis_since_last_message_threshold" : {
            "type" : "integer"
          },
          "rpc_url" : {
            "type" : "string",
            "format" : "url"
          }
        },
        "example" : {
          "rpc_url" : "http://example.com/aeiou",
          "hostname" : "hostname",
          "address" : "address",
          "millis_since_last_message" : 0,
          "millis_since_last_message_threshold" : 6,
          "status" : "status"
        }
      },
      "inline_response_200_1_blocks" : {
        "properties" : {
          "number" : {
            "type" : "integer"
          },
          "hash" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        },
        "example" : {
          "number" : 0,
          "hash" : "hash",
          "url" : "url"
        }
      },
      "inline_response_200_1" : {
        "properties" : {
          "blocks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_1_blocks"
            }
          },
          "next" : {
            "type" : "string"
          }
        },
        "example" : {
          "next" : "next",
          "blocks" : [ {
            "number" : 0,
            "hash" : "hash",
            "url" : "url"
          }, {
            "number" : 0,
            "hash" : "hash",
            "url" : "url"
          } ]
        }
      },
      "inline_response_200_2" : {
        "properties" : {
          "number" : {
            "type" : "integer"
          },
          "hash" : {
            "type" : "string"
          },
          "parentHash" : {
            "type" : "string"
          },
          "nonce" : {
            "type" : "string"
          },
          "size" : {
            "type" : "integer"
          },
          "timestamp" : {
            "type" : "integer",
            "description" : "The proposing replica's local system time. (In seconds since the UNIX epoch.)"
          },
          "transactions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "example" : {
          "number" : 0,
          "size" : 6,
          "parentHash" : "parentHash",
          "transactions" : [ "transactions", "transactions" ],
          "nonce" : "nonce",
          "hash" : "hash",
          "timestamp" : 1
        }
      },
      "inline_response_200_3" : {
        "properties" : {
          "hash" : {
            "type" : "string"
          },
          "from" : {
            "type" : "string"
          },
          "to" : {
            "type" : "string"
          },
          "contract_address" : {
            "type" : "string"
          },
          "value" : {
            "type" : "integer"
          },
          "input" : {
            "type" : "string"
          },
          "block_hash" : {
            "type" : "string"
          },
          "block_number" : {
            "type" : "integer"
          },
          "transaction_index" : {
            "type" : "integer"
          },
          "nonce" : {
            "type" : "integer"
          },
          "status" : {
            "type" : "integer"
          }
        },
        "example" : {
          "input" : "input",
          "block_hash" : "block_hash",
          "block_number" : 6,
          "from" : "from",
          "to" : "to",
          "transaction_index" : 1,
          "contract_address" : "contract_address",
          "value" : 0,
          "nonce" : 5,
          "hash" : "hash",
          "status" : 5
        }
      },
      "inline_response_200_4" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "params" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        },
        "example" : {
          "name" : "name",
          "params" : [ "{}", "{}" ]
        }
      },
      "inline_object" : {
        "required" : [ "id", "jsonrpc", "method", "params" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "jsonrpc" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          },
          "params" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "inline_response_200_5" : {
        "required" : [ "id", "jsonrpc" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "jsonrpc" : {
            "type" : "string"
          },
          "result" : {
            "type" : "string"
          },
          "error" : {
            "type" : "string"
          }
        },
        "example" : {
          "result" : "result",
          "id" : 0,
          "jsonrpc" : "jsonrpc",
          "error" : "error"
        }
      },
      "inline_response_200_6" : {
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "String representing id of this contract"
          },
          "owner" : {
            "type" : "string",
            "description" : "String representing address of the owner of this contract"
          },
          "url" : {
            "type" : "string",
            "description" : "The URI representing this specific contract"
          }
        },
        "example" : {
          "owner" : "owner",
          "contract_id" : "contract_id",
          "url" : "url"
        }
      },
      "inline_object_1" : {
        "required" : [ "compiler_version", "constructor_params", "contract_id", "contract_name", "from", "sourcecode", "version" ],
        "type" : "object",
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "String representing contract id"
          },
          "version" : {
            "type" : "string",
            "description" : "String representing version number of this contract"
          },
          "from" : {
            "type" : "string",
            "description" : "String representing owners address"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "String representing solidity source code of this version"
          },
          "contract_name" : {
            "type" : "string",
            "description" : "String representing contract name you used to deploy the contract"
          },
          "constructor_params" : {
            "type" : "string",
            "description" : "String representing constructor parameters needed to deploy this contract, if your contract does not require constructor parameters, set this to \"\""
          },
          "compiler_version" : {
            "type" : "string",
            "description" : "String representing solc version you used to deploy the contract"
          },
          "is_optimize" : {
            "type" : "boolean",
            "description" : "True if using the optimizer. False otherwise"
          },
          "runs" : {
            "type" : "string",
            "description" : "String representing optimize for how many times you intend to run the code"
          }
        }
      },
      "inline_response_200_7" : {
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "String representing id of this contract"
          },
          "owner" : {
            "type" : "string",
            "description" : "String representing address of the owner of this contract"
          },
          "versions" : {
            "type" : "array",
            "items" : {
              "properties" : {
                "address" : {
                  "type" : "string",
                  "description" : "String representing address at which this version is deployed"
                },
                "metadata" : {
                  "type" : "object",
                  "description" : "A metadata JSON object about source code of this version generated by solidity compiler"
                },
                "version" : {
                  "type" : "string",
                  "description" : "String representing name of this version"
                },
                "url" : {
                  "type" : "string",
                  "description" : "The URI representing this specific version"
                }
              }
            }
          }
        },
        "example" : {
          "owner" : "owner",
          "versions" : [ "{}", "{}" ],
          "contract_id" : "contract_id"
        }
      },
      "inline_response_200_8" : {
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "String representing id of this contract"
          },
          "owner" : {
            "type" : "string",
            "description" : "String representing address of the owner of this contract"
          },
          "version" : {
            "type" : "string",
            "description" : "String representing name of this version"
          },
          "metadata" : {
            "type" : "object",
            "description" : "A metadata JSON object about source code of this version generated by solidity compiler"
          },
          "address" : {
            "type" : "string",
            "description" : "String representing address at which this version is deployed"
          },
          "bytecode" : {
            "type" : "string",
            "description" : "String representing compiled bytecode of this version"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "String representing the actual source code of this version"
          }
        },
        "example" : {
          "owner" : "owner",
          "bytecode" : "bytecode",
          "metadata" : "{}",
          "address" : "address",
          "contract_id" : "contract_id",
          "version" : "version",
          "sourcecode" : "sourcecode"
        }
      },
      "inline_object_2" : {
        "required" : [ "compiler_version", "contract_id", "contract_name", "sourcecode" ],
        "type" : "object",
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "String representing contract name"
          },
          "compiler_version" : {
            "type" : "string",
            "description" : "String representing solc version you used to deploy the contract"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "String representing solidity source code of this version"
          },
          "contract_name" : {
            "type" : "string",
            "description" : "String representing contract name you used to deploy the contract"
          },
          "is_optimize" : {
            "type" : "boolean",
            "description" : "True if using the optimizer. False otherwise"
          },
          "runs" : {
            "type" : "string",
            "description" : "String representing optimize for how many times you intend to run the code"
          }
        }
      },
      "_blockchains_node_list" : {
        "properties" : {
          "node_id" : {
            "type" : "string",
            "description" : "Node ID",
            "format" : "uuid"
          },
          "ip" : {
            "type" : "string",
            "description" : "IP address of node"
          },
          "url" : {
            "type" : "string",
            "description" : "EthRPC url of node"
          },
          "cert" : {
            "type" : "string",
            "description" : "SSL certificate to talk to ethrpc"
          },
          "zone_id" : {
            "type" : "string",
            "description" : "Zone id this node is deployed in",
            "format" : "uuid"
          }
        },
        "example" : {
          "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "ip" : "ip",
          "cert" : "cert",
          "url" : "url",
          "node_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "_blockchains_replica_list" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Replica ID",
            "format" : "uuid"
          },
          "ip" : {
            "type" : "string",
            "description" : "IP address of replica"
          },
          "url" : {
            "type" : "string",
            "description" : "EthRPC url of replica"
          },
          "cert" : {
            "type" : "string",
            "description" : "SSL certificate to talk to ethrpc"
          },
          "zone_id" : {
            "type" : "string",
            "description" : "Zone id this replica is deployed in",
            "format" : "uuid"
          }
        },
        "example" : {
          "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "ip" : "ip",
          "cert" : "cert",
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "url" : "url"
        }
      },
      "inline_response_200_9" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Blockchain ID",
            "format" : "uuid"
          },
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of owning consortium",
            "format" : "uuid"
          },
          "blockchain_type" : {
            "type" : "string",
            "description" : "Type of blockchain node",
            "enum" : [ "ETHEREUM", "DAML", "HLF" ]
          },
          "node_list" : {
            "type" : "array",
            "description" : "Please use replica_list",
            "deprecated" : true,
            "items" : {
              "$ref" : "#/components/schemas/_blockchains_node_list"
            }
          },
          "replica_list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/_blockchains_replica_list"
            }
          }
        },
        "example" : {
          "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "blockchain_type" : "ETHEREUM",
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "node_list" : [ {
            "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "ip" : "ip",
            "cert" : "cert",
            "url" : "url",
            "node_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          }, {
            "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "ip" : "ip",
            "cert" : "cert",
            "url" : "url",
            "node_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          } ],
          "replica_list" : [ {
            "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "ip" : "ip",
            "cert" : "cert",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "url" : "url"
          }, {
            "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "ip" : "ip",
            "cert" : "cert",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "url" : "url"
          } ]
        }
      },
      "inline_object_3" : {
        "required" : [ "c_count", "concortium_id", "deployment_type", "f_count" ],
        "type" : "object",
        "properties" : {
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of owning consortium",
            "format" : "uuid"
          },
          "f_count" : {
            "type" : "integer",
            "description" : "Number of f replicas, cluster size will be 3f + 2c + 1"
          },
          "c_count" : {
            "type" : "integer",
            "description" : "Number of c replicas, cluster size will be 3f + 2c + 1"
          },
          "deployment_type" : {
            "type" : "string",
            "description" : "FIXED or UNSPECIFIED, determines site locations",
            "enum" : [ "FIXED", "UNSPECIFIED" ]
          },
          "blockchain_type" : {
            "type" : "string",
            "description" : "Type of blockchain node",
            "enum" : [ "ETHEREUM", "DAML", "HLF" ]
          },
          "zone_ids" : {
            "type" : "array",
            "description" : "List of zone IDs for replicas.  deployment_type must be FIXED.  Must contain 3f + 2c + 1 elements.\n",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "inline_response_202" : {
        "properties" : {
          "task_id" : {
            "type" : "string",
            "description" : "Task ID",
            "format" : "uuid"
          }
        },
        "example" : {
          "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_10" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "deleted zone id",
            "format" : "uuid"
          }
        },
        "example" : {
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_11_node_list" : {
        "properties" : {
          "node_id" : {
            "type" : "string",
            "description" : "Node ID",
            "format" : "uuid"
          },
          "ip" : {
            "type" : "string",
            "description" : "IP address of node"
          },
          "url" : {
            "type" : "string",
            "description" : "EthRPC url of node"
          },
          "cert" : {
            "type" : "string",
            "description" : "SSL certificate to talk to ethrpc"
          },
          "zone_id" : {
            "type" : "string",
            "description" : "Deployment zone for this node",
            "format" : "uuid"
          }
        },
        "example" : {
          "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "ip" : "ip",
          "cert" : "cert",
          "url" : "url",
          "node_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_11_replica_list" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Replica ID",
            "format" : "uuid"
          },
          "ip" : {
            "type" : "string",
            "description" : "IP address of replica"
          },
          "url" : {
            "type" : "string",
            "description" : "EthRPC url of replica"
          },
          "cert" : {
            "type" : "string",
            "description" : "SSL certificate to talk to ethrpc"
          },
          "zone_id" : {
            "type" : "string",
            "description" : "Deployment zone for this replica",
            "format" : "uuid"
          }
        },
        "example" : {
          "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "ip" : "ip",
          "cert" : "cert",
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "url" : "url"
        }
      },
      "inline_response_200_11" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Blockchain ID",
            "format" : "uuid"
          },
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of owning consortium",
            "format" : "uuid"
          },
          "blockchain_type" : {
            "type" : "string",
            "description" : "Type of blockchain node",
            "enum" : [ "ETHEREUM", "DAML", "HLF" ]
          },
          "node_list" : {
            "type" : "array",
            "description" : "Please use replica_list",
            "deprecated" : true,
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_11_node_list"
            }
          },
          "replica_list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_11_replica_list"
            }
          }
        },
        "example" : {
          "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "blockchain_type" : "ETHEREUM",
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "node_list" : [ {
            "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "ip" : "ip",
            "cert" : "cert",
            "url" : "url",
            "node_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          }, {
            "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "ip" : "ip",
            "cert" : "cert",
            "url" : "url",
            "node_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          } ],
          "replica_list" : [ {
            "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "ip" : "ip",
            "cert" : "cert",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "url" : "url"
          }, {
            "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "ip" : "ip",
            "cert" : "cert",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "url" : "url"
          } ]
        }
      },
      "inline_response_200_12" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Replica ID",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "description" : "Replica Name"
          },
          "public_ip" : {
            "type" : "string",
            "description" : "Public IP address of replica"
          },
          "rpc_url" : {
            "type" : "string",
            "description" : "Public url to replica API"
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of replica"
          },
          "millis_since_last_message" : {
            "type" : "integer"
          },
          "millis_since_last_message_threshold" : {
            "type" : "integer"
          },
          "certificate" : {
            "type" : "string",
            "description" : "SSL certificate of replica"
          },
          "zone_id" : {
            "type" : "string",
            "description" : "Zone ID where this replica has been deployed",
            "format" : "uuid"
          }
        },
        "example" : {
          "rpc_url" : "rpc_url",
          "zone_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "public_ip" : "public_ip",
          "name" : "name",
          "certificate" : "certificate",
          "millis_since_last_message" : 0,
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "millis_since_last_message_threshold" : 6,
          "status" : "status"
        }
      },
      "inline_object_4" : {
        "type" : "object",
        "properties" : {
          "node_ids" : {
            "type" : "array",
            "description" : "Please use replica_ids",
            "deprecated" : true,
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "replica_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "inline_response_202_1" : {
        "properties" : {
          "task_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        },
        "example" : {
          "task_ids" : [ "046b6c7f-0b8a-43b9-b35d-6489e6daee91", "046b6c7f-0b8a-43b9-b35d-6489e6daee91" ]
        }
      },
      "inline_response_202_2" : {
        "properties" : {
          "task_id" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "example" : {
          "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_object_5" : {
        "required" : [ "id", "jsonrpc", "method", "params" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "jsonrpc" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          },
          "params" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "inline_object_6" : {
        "required" : [ "compiler_version", "contract_id", "contract_name", "from", "sourcecode", "version" ],
        "type" : "object",
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "String representing contract id"
          },
          "version" : {
            "type" : "string",
            "description" : "String representing version number of this contract"
          },
          "from" : {
            "type" : "string",
            "description" : "String representing owners address"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "String representing solidity source code of this version"
          },
          "contract_name" : {
            "type" : "string",
            "description" : "String representing contract name you used to deploy the contract"
          },
          "constructor_params" : {
            "type" : "string",
            "description" : "String representing constructor parameters needed to deploy this contract, if your contract does not require constructor parameters, set this to \"\""
          },
          "compiler_version" : {
            "type" : "string",
            "description" : "String representing solc version you used to deploy the contract"
          },
          "is_optimize" : {
            "type" : "boolean",
            "description" : "True if using the optimizer. False otherwise"
          },
          "runs" : {
            "type" : "string",
            "description" : "String representing optimize for how many times you intend to run the code"
          }
        }
      },
      "inline_object_7" : {
        "required" : [ "compiler_version", "contract_id", "contract_name", "sourcecode" ],
        "type" : "object",
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "String representing contract name"
          },
          "compiler_version" : {
            "type" : "string",
            "description" : "String representing solc version you used to deploy the contract"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "String representing solidity source code of this version"
          },
          "contract_name" : {
            "type" : "string",
            "description" : "String representing contract name you used to deploy the contract"
          },
          "is_optimize" : {
            "type" : "boolean",
            "description" : "True if using the optimizer. False otherwise"
          },
          "runs" : {
            "type" : "string",
            "description" : "String representing optimize for how many times you intend to run the code"
          }
        }
      },
      "inline_response_200_13" : {
        "properties" : {
          "consortium_id" : {
            "type" : "string",
            "description" : "Consortium ID",
            "format" : "uuid"
          },
          "consortium_name" : {
            "type" : "string",
            "description" : "Name of Consortium",
            "format" : "string"
          }
        },
        "example" : {
          "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "consortium_name" : "consortium_name"
        }
      },
      "inline_object_8" : {
        "required" : [ "consortium_name", "consortium_type", "organization" ],
        "type" : "object",
        "properties" : {
          "consortium_name" : {
            "type" : "string",
            "description" : "Name of consortium",
            "format" : "string"
          },
          "consortium_type" : {
            "type" : "string",
            "description" : "Type of consortium",
            "format" : "string"
          },
          "organization" : {
            "type" : "string",
            "description" : "Organization that the consortium is a part of",
            "format" : "UUID"
          }
        }
      },
      "inline_response_200_14" : {
        "properties" : {
          "con_id" : {
            "type" : "string",
            "description" : "Consortium ID",
            "format" : "UUID"
          },
          "consortium_name" : {
            "type" : "string",
            "description" : "Consortium Name",
            "format" : "string"
          }
        },
        "example" : {
          "con_id" : "con_id",
          "consortium_name" : "consortium_name"
        }
      },
      "inline_response_200_15" : {
        "properties" : {
          "org_id" : {
            "type" : "string",
            "description" : "Consortium ID",
            "format" : "uuid"
          },
          "organization_name" : {
            "type" : "string",
            "description" : "Name of Consortium",
            "format" : "string"
          }
        },
        "example" : {
          "org_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "organization_name" : "organization_name"
        }
      },
      "inline_object_9" : {
        "type" : "object",
        "properties" : {
          "consortium_name" : {
            "type" : "string",
            "description" : "Name of consortium",
            "format" : "string"
          },
          "consortium_type" : {
            "type" : "string",
            "description" : "Type of consortium",
            "format" : "string"
          },
          "orgs_to_add" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Organizations to add as members of this consortium",
              "format" : "uuid"
            }
          },
          "orgs_to_remove" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Organizations to remove as members of this consortium",
              "format" : "uuid"
            }
          }
        }
      },
      "inline_response_200_16_members" : {
        "properties" : {
          "org_id" : {
            "type" : "string",
            "description" : "Organization Id",
            "format" : "uuid"
          },
          "organization_name" : {
            "type" : "string",
            "description" : "Organization name"
          }
        },
        "example" : {
          "org_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "organization_name" : "organization_name"
        }
      },
      "inline_response_200_16" : {
        "properties" : {
          "con_id" : {
            "type" : "string",
            "description" : "Consortium ID",
            "format" : "uuid"
          },
          "consortium_name" : {
            "type" : "string",
            "description" : "Consortium Name",
            "format" : "string"
          },
          "organization" : {
            "type" : "string",
            "description" : "Owning organization",
            "format" : "uuid"
          },
          "members" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_16_members"
            }
          }
        },
        "example" : {
          "con_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "organization" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "members" : [ {
            "org_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "organization_name" : "organization_name"
          }, {
            "org_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "organization_name" : "organization_name"
          } ],
          "consortium_name" : "consortium_name"
        }
      },
      "inline_response_200_17" : {
        "properties" : {
          "orgId" : {
            "type" : "string",
            "description" : "Organization ID",
            "format" : "uuid"
          },
          "organization_name" : {
            "type" : "string",
            "description" : "Name of organization",
            "format" : "string"
          }
        },
        "example" : {
          "organization_name" : "organization_name",
          "orgId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_object_10" : {
        "required" : [ "organization_name" ],
        "type" : "object",
        "properties" : {
          "organization_name" : {
            "type" : "string",
            "description" : "Name of organization",
            "format" : "string"
          }
        }
      },
      "inline_response_200_18" : {
        "properties" : {
          "org_id" : {
            "type" : "string",
            "description" : "Organization ID",
            "format" : "uuid"
          },
          "OrganizationName" : {
            "type" : "string",
            "description" : "Organization Name",
            "format" : "string"
          }
        },
        "example" : {
          "OrganizationName" : "OrganizationName",
          "org_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_19" : {
        "properties" : {
          "org_id" : {
            "type" : "string",
            "description" : "Organization ID",
            "format" : "uuid"
          },
          "organization_name" : {
            "type" : "string",
            "description" : "Name of organization",
            "format" : "string"
          }
        },
        "example" : {
          "org_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "organization_name" : "organization_name"
        }
      },
      "inline_object_11" : {
        "type" : "object",
        "properties" : {
          "Organization_name" : {
            "type" : "string",
            "description" : "Updating name of the organization"
          }
        }
      },
      "inline_response_200_20" : {
        "properties" : {
          "task_id" : {
            "type" : "string",
            "description" : "Task ID",
            "format" : "uuid"
          },
          "state" : {
            "type" : "string",
            "description" : "Current state of of the task",
            "enum" : [ "RUNNING", "SUCCEEDED", "FAILED" ]
          },
          "message" : {
            "type" : "string",
            "description" : "Additional information from the task"
          },
          "resource_id" : {
            "type" : "string",
            "description" : "The resoruce created or updated by this task.  May not be accurate until state is FAILED or SUCCEEDED.",
            "format" : "uuid"
          },
          "resource_link" : {
            "type" : "string",
            "description" : "Link to the resource created or updated by this task.",
            "format" : "uri"
          }
        },
        "example" : {
          "resource_link" : "http://example.com/aeiou",
          "resource_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "state" : "RUNNING",
          "message" : "message"
        }
      },
      "inline_object_12" : {
        "type" : "object",
        "properties" : {
          "task_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "inline_response_200_21" : {
        "properties" : {
          "states" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_20"
            }
          }
        },
        "example" : {
          "states" : [ {
            "resource_link" : "http://example.com/aeiou",
            "resource_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "state" : "RUNNING",
            "message" : "message"
          }, {
            "resource_link" : "http://example.com/aeiou",
            "resource_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "state" : "RUNNING",
            "message" : "message"
          } ]
        }
      },
      "_users_details" : {
        "properties" : {
          "first_name" : {
            "type" : "string",
            "description" : "First name of this user"
          },
          "last_name" : {
            "type" : "string",
            "description" : "Last name of this user"
          }
        },
        "example" : {
          "last_name" : "last_name",
          "first_name" : "first_name"
        }
      },
      "_users_consortium" : {
        "properties" : {
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of consortium to which this user belongs",
            "format" : "uuid"
          },
          "consortium_name" : {
            "type" : "string",
            "description" : "Name of consortium to which this user belongs"
          }
        },
        "example" : {
          "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "consortium_name" : "consortium_name"
        }
      },
      "_users_organization" : {
        "properties" : {
          "organization_id" : {
            "type" : "string",
            "description" : "ID of organization to which this user belongs",
            "format" : "uuid"
          },
          "organization_name" : {
            "type" : "string",
            "description" : "Name of organization to which this user belongs"
          }
        },
        "example" : {
          "organization_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "organization_name" : "organization_name"
        }
      },
      "inline_response_200_22" : {
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "UUID value representing ID of this user",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "description" : "String representing name of this user"
          },
          "email" : {
            "type" : "string",
            "description" : "String representing email of this user"
          },
          "role" : {
            "type" : "string",
            "description" : "String representing role of this user"
          },
          "last_login" : {
            "type" : "integer",
            "description" : "Integer value representing the time (in milliseconds since epoch) when this user last logged in"
          },
          "details" : {
            "$ref" : "#/components/schemas/_users_details"
          },
          "consortium" : {
            "$ref" : "#/components/schemas/_users_consortium"
          },
          "organization" : {
            "$ref" : "#/components/schemas/_users_organization"
          }
        },
        "example" : {
          "role" : "role",
          "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "last_login" : 0,
          "consortium" : {
            "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "consortium_name" : "consortium_name"
          },
          "organization" : {
            "organization_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "organization_name" : "organization_name"
          },
          "name" : "name",
          "details" : {
            "last_name" : "last_name",
            "first_name" : "first_name"
          },
          "email" : "email"
        }
      },
      "_users_consortium_1" : {
        "properties" : {
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of consortium to which this user belongs",
            "format" : "uuid"
          }
        }
      },
      "_users_organization_1" : {
        "properties" : {
          "organization_id" : {
            "type" : "string",
            "description" : "ID of organization to which this user belongs",
            "format" : "uuid"
          }
        }
      },
      "inline_object_13" : {
        "required" : [ "consortium", "email", "name", "organization", "password", "role" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "String representing name of this user"
          },
          "email" : {
            "type" : "string",
            "description" : "String representing email of this user"
          },
          "role" : {
            "type" : "string",
            "description" : "String representing role of this user"
          },
          "details" : {
            "$ref" : "#/components/schemas/_users_details"
          },
          "consortium" : {
            "$ref" : "#/components/schemas/_users_consortium_1"
          },
          "organization" : {
            "$ref" : "#/components/schemas/_users_organization_1"
          },
          "password" : {
            "type" : "string",
            "description" : "Password of this user"
          }
        }
      },
      "inline_response_200_23" : {
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "User ID of newly created user",
            "format" : "uuid"
          }
        },
        "example" : {
          "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "_users_user_id_details" : {
        "properties" : {
          "first_name" : {
            "type" : "string",
            "description" : "New first name of the user"
          },
          "last_name" : {
            "type" : "string",
            "description" : "New last name of the user"
          }
        }
      },
      "inline_object_14" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "New name of the user"
          },
          "email" : {
            "type" : "string",
            "description" : "New email of the user"
          },
          "role" : {
            "type" : "string",
            "description" : "New role of the user"
          },
          "details" : {
            "$ref" : "#/components/schemas/_users_user_id_details"
          }
        }
      },
      "inline_object_15" : {
        "required" : [ "password" ],
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string",
            "description" : "Password of the user"
          }
        }
      },
      "inline_response_200_24" : {
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "Integer value representing ID of this user",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "description" : "String representing name of this user"
          },
          "email" : {
            "type" : "string",
            "description" : "String representing email of this user"
          },
          "role" : {
            "type" : "string",
            "description" : "String representing role of this user"
          },
          "last_login" : {
            "type" : "integer",
            "description" : "Integer value representing the time (in milliseconds since epoch) when this user last logged in"
          },
          "details" : {
            "$ref" : "#/components/schemas/_users_details"
          },
          "consortium" : {
            "$ref" : "#/components/schemas/_users_consortium"
          },
          "organization" : {
            "$ref" : "#/components/schemas/_users_organization"
          },
          "isAuthenticated" : {
            "type" : "boolean",
            "description" : "True if login succeeded. False otherwise."
          }
        },
        "example" : {
          "role" : "role",
          "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "last_login" : 0,
          "consortium" : {
            "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "consortium_name" : "consortium_name"
          },
          "organization" : {
            "organization_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "organization_name" : "organization_name"
          },
          "name" : "name",
          "details" : {
            "last_name" : "last_name",
            "first_name" : "first_name"
          },
          "isAuthenticated" : true,
          "email" : "email"
        }
      },
      "inline_object_16" : {
        "required" : [ "email", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email of the user"
          },
          "password" : {
            "type" : "string",
            "description" : "New password of the user"
          }
        }
      },
      "inline_object_17" : {
        "required" : [ "refresh_token" ],
        "type" : "object",
        "properties" : {
          "refresh_token" : {
            "type" : "string",
            "description" : "Token needed to generate new authentication token."
          }
        }
      },
      "inline_response_200_25" : {
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Token used for authentication."
          },
          "refresh_token" : {
            "type" : "string",
            "description" : "Token used to regenerate a token, token_expires and refresh_token"
          },
          "token_expires" : {
            "type" : "string",
            "description" : "Amount of time till your token expires."
          }
        },
        "example" : {
          "refresh_token" : "refresh_token",
          "token_expires" : "token_expires",
          "token" : "token"
        }
      },
      "inline_response_200_26" : {
        "properties" : {
          "auth_token" : {
            "type" : "string",
            "description" : "Current Authentication token as JWT"
          },
          "id_token" : {
            "type" : "string",
            "description" : "Open ID token"
          },
          "email" : {
            "type" : "string",
            "description" : "User account"
          },
          "last_login" : {
            "type" : "integer",
            "description" : "Last login time"
          }
        },
        "example" : {
          "last_login" : 0,
          "id_token" : "id_token",
          "auth_token" : "auth_token",
          "email" : "email"
        }
      }
    },
    "responses" : {
      "ErrorResponse" : {
        "description" : "Error Response",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "ZoneListReponse" : {
        "description" : "List of available zones",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/BaseZoneGet"
              }
            }
          }
        }
      },
      "ZoneGetResponse" : {
        "description" : "Get Zone information details.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Zone"
            }
          }
        }
      }
    },
    "parameters" : {
      "ZoneId" : {
        "name" : "zone_id",
        "in" : "path",
        "description" : "The id of the on-premises zone to get",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        }
      }
    },
    "requestBodies" : {
      "CreateZoneRequst" : {
        "description" : "Create a new zone",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/OnPremZonePost"
            }
          }
        }
      },
      "PatchZoneRequst" : {
        "description" : "Patch an existing zone",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/OnPremZonePost"
            }
          }
        }
      },
      "inline_object" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object"
            }
          }
        }
      },
      "inline_object_1" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_1"
            }
          }
        }
      },
      "inline_object_2" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_2"
            }
          }
        }
      },
      "inline_object_3" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_3"
            }
          }
        }
      },
      "inline_object_4" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_4"
            }
          }
        },
        "required" : true
      },
      "inline_object_5" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_5"
            }
          }
        }
      },
      "inline_object_6" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_6"
            }
          }
        }
      },
      "inline_object_7" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_7"
            }
          }
        },
        "required" : true
      },
      "inline_object_8" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_8"
            }
          }
        }
      },
      "inline_object_9" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_9"
            }
          }
        },
        "required" : true
      },
      "inline_object_10" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_10"
            }
          }
        },
        "required" : true
      },
      "inline_object_11" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_11"
            }
          }
        },
        "required" : true
      },
      "inline_object_12" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_12"
            }
          }
        },
        "required" : true
      },
      "inline_object_13" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_13"
            }
          }
        },
        "required" : true
      },
      "inline_object_14" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_14"
            }
          }
        },
        "required" : true
      },
      "inline_object_15" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_15"
            }
          }
        }
      },
      "inline_object_16" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_16"
            }
          }
        }
      },
      "inline_object_17" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_17"
            }
          }
        }
      }
    }
  }
}