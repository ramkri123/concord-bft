{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "VMware Blockchain API",
    "description" : "A Scalable Byzantine Fault Tolerant Ledger",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "/api",
    "description" : "Local API endpoint"
  } ],
  "paths" : {
    "/concord/members" : {
      "summary" : "Blockchain Consensus Membership List",
      "get" : {
        "summary" : "List nodes that are members",
        "operationId" : "memberListGet",
        "responses" : {
          "200" : {
            "description" : "Members",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/concord/blocks" : {
      "summary" : "Blockchain Blocks",
      "get" : {
        "summary" : "List blocks in the chain, most recent first",
        "operationId" : "blockListGet",
        "parameters" : [ {
          "name" : "latest",
          "in" : "query",
          "description" : "most recent block to start with",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "number of blocks to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Blocks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          }
        }
      }
    },
    "/concord/blocks/{index}" : {
      "summary" : "Specific Blockchain Block",
      "get" : {
        "summary" : "Get a specific block, by its number in the chain",
        "operationId" : "blockGet",
        "parameters" : [ {
          "name" : "index",
          "in" : "path",
          "description" : "the index of the block to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Block",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          }
        }
      }
    },
    "/concord/transactions/{hash}" : {
      "summary" : "Specific Blockchain Block",
      "get" : {
        "summary" : "Get a specific transaction, by its hash",
        "operationId" : "txGet",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "the hash of the index to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          }
        }
      }
    },
    "/concord/eth" : {
      "summary" : "Ethereum JSON RPC API",
      "get" : {
        "summary" : "List available RPC methods",
        "operationId" : "ethJsonRpcGet",
        "responses" : {
          "200" : {
            "description" : "RPC Method List",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_4"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Call the named procedure",
        "externalDocs" : {
          "description" : "Ethereum JSON RPC Docs",
          "url" : "https://ethereum.gitbooks.io/frontier-guide/content/rpc.html"
        },
        "operationId" : "ethJsonRpcPost",
        "requestBody" : {
          "description" : "RPC Request",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "id", "jsonrpc", "method", "params" ],
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "jsonrpc" : {
                    "type" : "string"
                  },
                  "method" : {
                    "type" : "string"
                  },
                  "params" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object"
                    }
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object"
        },
        "responses" : {
          "200" : {
            "description" : "RPC Result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                }
              }
            }
          }
        }
      }
    },
    "/concord/contracts" : {
      "summary" : "Blockchain contracts",
      "get" : {
        "summary" : "List all deployed contracts",
        "operationId" : "contractsGet",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all contracts deployed to concord",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_6"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Deploy a new contract to concord",
        "operationId" : "contractsPost",
        "requestBody" : {
          "description" : "New contract POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "compiler_version", "constructor_params", "contract_id", "contract_name", "from", "sourcecode", "version" ],
                "type" : "object",
                "properties" : {
                  "contract_id" : {
                    "type" : "string",
                    "description" : "string representing contract id"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "string representing version number of this contract"
                  },
                  "from" : {
                    "type" : "string",
                    "description" : "string representing owners address"
                  },
                  "sourcecode" : {
                    "type" : "string",
                    "description" : "string representing solidity source code of this version"
                  },
                  "contract_name" : {
                    "type" : "string",
                    "description" : "string representing contract name you used to deploy the contract"
                  },
                  "constructor_params" : {
                    "type" : "string",
                    "description" : "string representing constructor parameters needed to deploy this contract, if your contract does not require constructor parameters, set this to \"\""
                  },
                  "compiler_version" : {
                    "type" : "string",
                    "description" : "string representing solc version you used to deploy the contract"
                  },
                  "is_optimize" : {
                    "type" : "boolean",
                    "description" : "True if using the optimizer. False otherwise"
                  },
                  "runs" : {
                    "type" : "string",
                    "description" : "string representing optimize for how many times you intend to run the code"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_1"
        },
        "responses" : {
          "200" : {
            "description" : "description of deployed contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "properties" : {
                      "contract_id" : {
                        "type" : "string",
                        "description" : "string representing id of this contract"
                      },
                      "version" : {
                        "type" : "string",
                        "description" : "string representing name of this version"
                      },
                      "url" : {
                        "type" : "string",
                        "description" : "The URI representing this specific version"
                      },
                      "error" : {
                        "type" : "string",
                        "description" : "Error message if any error occurred during deployment, null otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/concord/contracts/{contract_id}" : {
      "get" : {
        "summary" : "Get a contract with id `contract_id`",
        "operationId" : "GetContractById",
        "parameters" : [ {
          "name" : "contract_id",
          "in" : "path",
          "description" : "the id of the contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the particular contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_7"
                }
              }
            }
          }
        }
      }
    },
    "/concord/contracts/{contract_id}/versions/{version_name}" : {
      "get" : {
        "summary" : "Get a contract identified by given `contract_id` and `version_name`",
        "operationId" : "GetContractByIdAndVersion",
        "parameters" : [ {
          "name" : "contract_id",
          "in" : "path",
          "description" : "the id of the contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "version_name",
          "in" : "path",
          "description" : "name of the version of contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All details of a particular version of this particular contract ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          }
        }
      }
    },
    "/concord/contracts/{contract_address}" : {
      "put" : {
        "summary" : "Verify a contract identified by given `contract_address`",
        "operationId" : "PutContractByIdAndVersion",
        "parameters" : [ {
          "name" : "contract_address",
          "in" : "path",
          "description" : "the address of the contract",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Verify contract PUT request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "compiler_version", "contract_id", "contract_name", "sourcecode" ],
                "type" : "object",
                "properties" : {
                  "contract_id" : {
                    "type" : "string",
                    "description" : "string representing contract name"
                  },
                  "compiler_version" : {
                    "type" : "string",
                    "description" : "string representing solc version you used to deploy the contract"
                  },
                  "sourcecode" : {
                    "type" : "string",
                    "description" : "string representing solidity source code of this version"
                  },
                  "contract_name" : {
                    "type" : "string",
                    "description" : "string representing contract name you used to deploy the contract"
                  },
                  "is_optimize" : {
                    "type" : "boolean",
                    "description" : "True if using the optimizer. False otherwise"
                  },
                  "runs" : {
                    "type" : "string",
                    "description" : "string representing optimize for how many times you intend to run the code"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_2"
        },
        "responses" : {
          "200" : {
            "description" : "All details of a particular version of this particular contract ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains" : {
      "summary" : "Blockchain",
      "get" : {
        "summary" : "List all blockchains",
        "operationId" : "getBlockchains",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all blockchains",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_9"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a new blockchain",
        "operationId" : "blockchainPost",
        "requestBody" : {
          "description" : "New blockchain POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "c_count", "concortium_id", "deployment_type", "f_count" ],
                "type" : "object",
                "properties" : {
                  "consortium_id" : {
                    "type" : "string",
                    "description" : "ID of owning consortium",
                    "format" : "uuid"
                  },
                  "f_count" : {
                    "type" : "integer",
                    "description" : "Number of f nodes, cluster size will be 3f +2c + 1"
                  },
                  "c_count" : {
                    "type" : "integer",
                    "description" : "Number of c nodes, cluster size will be 3f +2c + 1"
                  },
                  "deployment_type" : {
                    "type" : "string",
                    "description" : "FIXED or UNSPECIFIED, determines site locations",
                    "enum" : [ "FIXED", "UNSPECIFIED" ]
                  },
                  "site_ids" : {
                    "type" : "array",
                    "description" : "List of site ids.  Required if deployment type is fixed",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_3"
        },
        "responses" : {
          "202" : {
            "description" : "Returns the deployment task ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}" : {
      "summary" : "Blockchain",
      "get" : {
        "summary" : "Get Blockchain information",
        "operationId" : "getBlockchain",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the specified blockchain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_9"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Update an existing blockchain",
        "operationId" : "blockchainPatch",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Blockchain items to patch",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "ip_list" : {
                    "type" : "string",
                    "description" : "comma separated list of addresses of blockchain nodes"
                  },
                  "rpc_urls" : {
                    "type" : "string",
                    "description" : "string represent url map, comma separated list of hostname=url"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_4"
        },
        "responses" : {
          "200" : {
            "description" : "Returns the specified blockchain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_10"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/nodes" : {
      "post" : {
        "summary" : "start/stop a list of nodes",
        "operationId" : "nodeListStartStop",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "start/stop",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "start", "stop" ]
          }
        } ],
        "requestBody" : {
          "description" : "Nodes to stop/start",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "node_ips" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "format" : "uuid"
                    }
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_5"
        },
        "responses" : {
          "202" : {
            "description" : "task ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202_1"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/nodes/{node_id}" : {
      "post" : {
        "summary" : "start/stop a list of nodes",
        "operationId" : "nodeStartStop",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "node_id",
          "in" : "path",
          "description" : "Node ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "start/stop",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "start", "stop" ]
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "task ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202_2"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/members" : {
      "summary" : "Blockchain Consensus Membership List",
      "get" : {
        "summary" : "List nodes that are members",
        "operationId" : "memberListGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Members",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/blocks" : {
      "summary" : "Blockchain Blocks",
      "get" : {
        "summary" : "List blocks in the chain, most recent first",
        "operationId" : "blockListGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "latest",
          "in" : "query",
          "description" : "most recent block to start with",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "number of blocks to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Blocks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/blocks/{index}" : {
      "summary" : "Specific Blockchain Block",
      "get" : {
        "summary" : "Get a specific block, by its number in the chain",
        "operationId" : "blockGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "the index of the block to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Block",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/transactions/{hash}" : {
      "summary" : "Specific Blockchain Block",
      "get" : {
        "summary" : "Get a specific transaction, by its hash",
        "operationId" : "txGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "hash",
          "in" : "path",
          "description" : "the hash of the index to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/eth" : {
      "summary" : "Ethereum JSON RPC API",
      "post" : {
        "summary" : "Call the named procedure",
        "externalDocs" : {
          "description" : "Ethereum JSON RPC Docs",
          "url" : "https://ethereum.gitbooks.io/frontier-guide/content/rpc.html"
        },
        "operationId" : "ethJsonRpcPostBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "RPC Request",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "id", "jsonrpc", "method", "params" ],
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "jsonrpc" : {
                    "type" : "string"
                  },
                  "method" : {
                    "type" : "string"
                  },
                  "params" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object"
                    }
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_6"
        },
        "responses" : {
          "200" : {
            "description" : "RPC Result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/contracts" : {
      "summary" : "Blockchain contracts",
      "get" : {
        "summary" : "List all deployed contracts",
        "operationId" : "contractsGetBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of all contracts deployed to concord",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_6"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Deploy a new contract to concord",
        "operationId" : "ContractsPostBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "New contract POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "compiler_version", "contract_id", "contract_name", "from", "sourcecode", "version" ],
                "type" : "object",
                "properties" : {
                  "contract_id" : {
                    "type" : "string",
                    "description" : "string representing contract id"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "string representing version number of this contract"
                  },
                  "from" : {
                    "type" : "string",
                    "description" : "string representing owners address"
                  },
                  "sourcecode" : {
                    "type" : "string",
                    "description" : "string representing solidity source code of this version"
                  },
                  "contract_name" : {
                    "type" : "string",
                    "description" : "string representing contract name you used to deploy the contract"
                  },
                  "constructor_params" : {
                    "type" : "string",
                    "description" : "string representing constructor parameters needed to deploy this contract, if your contract does not require constructor parameters, set this to \"\""
                  },
                  "compiler_version" : {
                    "type" : "string",
                    "description" : "string representing solc version you used to deploy the contract"
                  },
                  "is_optimize" : {
                    "type" : "boolean",
                    "description" : "True if using the optimizer. False otherwise"
                  },
                  "runs" : {
                    "type" : "string",
                    "description" : "string representing optimize for how many times you intend to run the code"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_7"
        },
        "responses" : {
          "200" : {
            "description" : "description of deployed contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "properties" : {
                      "contract_id" : {
                        "type" : "string",
                        "description" : "string representing id of this contract"
                      },
                      "version" : {
                        "type" : "string",
                        "description" : "string representing name of this version"
                      },
                      "url" : {
                        "type" : "string",
                        "description" : "The URI representing this specific version"
                      },
                      "error" : {
                        "type" : "string",
                        "description" : "Error message if any error occurred during deployment, null otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/contracts/{contract_id}" : {
      "get" : {
        "summary" : "Get a contract with id `contract_id`",
        "operationId" : "GetContractByIdBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "contract_id",
          "in" : "path",
          "description" : "the id of the contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the particular contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_7"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/contracts/{contract_id}/versions/{version_name}" : {
      "get" : {
        "summary" : "Get a contract identified by given `contract_id` and `version_name`",
        "operationId" : "GetContractByIdAndVersionBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "contract_id",
          "in" : "path",
          "description" : "the id of the contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "version_name",
          "in" : "path",
          "description" : "name of the version of contract to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All details of a particular version of this particular contract ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          }
        }
      }
    },
    "/blockchains/{bid}/concord/contracts/{contract_address}" : {
      "put" : {
        "summary" : "Verify a contract identified by given `contract_address`",
        "operationId" : "PutContractByIdAndVersionBlk",
        "parameters" : [ {
          "name" : "bid",
          "in" : "path",
          "description" : "Blockchain ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "contract_address",
          "in" : "path",
          "description" : "the address of the contract",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Verify contract PUT request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "compiler_version", "contract_id", "contract_name", "sourcecode" ],
                "type" : "object",
                "properties" : {
                  "contract_id" : {
                    "type" : "string",
                    "description" : "string representing contract name"
                  },
                  "compiler_version" : {
                    "type" : "string",
                    "description" : "string representing solc version you used to deploy the contract"
                  },
                  "sourcecode" : {
                    "type" : "string",
                    "description" : "string representing solidity source code of this version"
                  },
                  "contract_name" : {
                    "type" : "string",
                    "description" : "string representing contract name you used to deploy the contract"
                  },
                  "is_optimize" : {
                    "type" : "boolean",
                    "description" : "True if using the optimizer. False otherwise"
                  },
                  "runs" : {
                    "type" : "string",
                    "description" : "string representing optimize for how many times you intend to run the code"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_8"
        },
        "responses" : {
          "200" : {
            "description" : "All details of a particular version of this particular contract ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          }
        }
      }
    },
    "/consortiums" : {
      "summary" : "GetConsortium",
      "get" : {
        "summary" : "List all consortiums",
        "operationId" : "getConsortiums",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all consortiums",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_11"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a new Consortium",
        "operationId" : "consortiumPost",
        "requestBody" : {
          "description" : "New consortium POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "consortiumName", "consortiumType", "organization" ],
                "type" : "object",
                "properties" : {
                  "consortiumName" : {
                    "type" : "string",
                    "description" : "Name of consortium",
                    "format" : "string"
                  },
                  "consortiumType" : {
                    "type" : "string",
                    "description" : "Type of consortium",
                    "format" : "string"
                  },
                  "organization" : {
                    "type" : "string",
                    "description" : "Organization that the consortium is a part of",
                    "format" : "UUID"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_9"
        },
        "responses" : {
          "202" : {
            "description" : "Returns the consortium ID and Name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202_3"
                }
              }
            }
          }
        }
      }
    },
    "/consortiums/{con_id}" : {
      "summary" : "GetConsortium_byID",
      "get" : {
        "summary" : "Get Consortium by its ID",
        "operationId" : "getConsortium",
        "parameters" : [ {
          "name" : "con_id",
          "in" : "path",
          "description" : "Consortium ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the specified consortium",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_12"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Update an existing consortium",
        "operationId" : "consortiumPatch",
        "parameters" : [ {
          "name" : "con_id",
          "in" : "path",
          "description" : "Consortium ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Consortium items to patch",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "consortiumName", "consortiumType", "organization" ],
                "type" : "object",
                "properties" : {
                  "consortiumName" : {
                    "type" : "string",
                    "description" : "Name of consortium",
                    "format" : "string"
                  },
                  "consortiumType" : {
                    "type" : "string",
                    "description" : "Type of consortium",
                    "format" : "string"
                  },
                  "organization" : {
                    "type" : "string",
                    "description" : "Organization that the consortium is a part of",
                    "format" : "UUID"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_10"
        },
        "responses" : {
          "202" : {
            "description" : "Returns the Consortium ID and Name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202_4"
                }
              }
            }
          }
        }
      }
    },
    "/organizations" : {
      "summary" : "GetOrganization",
      "get" : {
        "summary" : "List all organizations",
        "operationId" : "getOrganizations",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all organizations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_13"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a new organization",
        "operationId" : "organizationPost",
        "requestBody" : {
          "description" : "New organization POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "organizationName" ],
                "type" : "object",
                "properties" : {
                  "organizationName" : {
                    "type" : "string",
                    "description" : "Name of organization",
                    "format" : "string"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_11"
        },
        "responses" : {
          "202" : {
            "description" : "Returns the organization ID and Name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202_5"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}" : {
      "summary" : "GetOrganization_byid",
      "get" : {
        "summary" : "Get Organization by its id",
        "operationId" : "getOrganization",
        "parameters" : [ {
          "name" : "org_id",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the specified organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_13"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Update an existing organization",
        "operationId" : "organizationPatch",
        "parameters" : [ {
          "name" : "org_id",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Organization items to patch",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "OrganizationName" : {
                    "type" : "string",
                    "description" : "Updating name of the organization"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_12"
        },
        "responses" : {
          "202" : {
            "description" : "Returns the organization ID and Name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_202_5"
                }
              }
            }
          }
        }
      }
    },
    "/tasks" : {
      "summary" : "Get all Tasks",
      "get" : {
        "summary" : "Get the statuses of all tasks",
        "operationId" : "listTask",
        "responses" : {
          "200" : {
            "description" : "Returns the current task status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_14"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Get the statuses of listed tasks",
        "operationId" : "getTaskList",
        "parameters" : [ {
          "name" : "get_state",
          "in" : "query",
          "description" : "get states",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "List of task ids",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "task_ids" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "format" : "uuid"
                    }
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_13"
        },
        "responses" : {
          "200" : {
            "description" : "Returns the current task status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_15"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}" : {
      "summary" : "Tasks",
      "get" : {
        "summary" : "Get the status of the specified task",
        "operationId" : "getTask",
        "parameters" : [ {
          "name" : "task_id",
          "in" : "path",
          "description" : "Task ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current task status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_14"
                }
              }
            }
          }
        }
      }
    },
    "/users" : {
      "summary" : "Helen User management",
      "get" : {
        "summary" : "Get a list of user which belong to specific organization and specific consortium",
        "operationId" : "usersGet",
        "parameters" : [ {
          "name" : "consortium",
          "in" : "query",
          "description" : "ID of the consortium",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organization",
          "in" : "query",
          "description" : "ID of the organization",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of all users who are part of given consortium and given organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_16"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a new user in Helen",
        "operationId" : "usersPost",
        "requestBody" : {
          "description" : "User creation POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "consortium", "email", "name", "organization", "password", "role" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "string representing name of this user"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "string representing email of this user"
                  },
                  "role" : {
                    "type" : "string",
                    "description" : "string representing role of this user"
                  },
                  "details" : {
                    "$ref" : "#/components/schemas/_users_details"
                  },
                  "consortium" : {
                    "$ref" : "#/components/schemas/_users_consortium_1"
                  },
                  "organization" : {
                    "$ref" : "#/components/schemas/_users_organization_1"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "password of this user"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_14"
        },
        "responses" : {
          "200" : {
            "description" : "User ID of newly created user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_17"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}" : {
      "summary" : "Helen User management",
      "get" : {
        "summary" : "Get the user identified by given user_id",
        "operationId" : "GetUserById",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "the id of the user to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a json object describing specified user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_16"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Update user information",
        "operationId" : "UpdateUser",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "the id of the user to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "User PATCH request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "new name of the user"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "new email of the user"
                  },
                  "role" : {
                    "type" : "string",
                    "description" : "new role of the user"
                  },
                  "details" : {
                    "$ref" : "#/components/schemas/_users_user_id_details"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_15"
        },
        "responses" : {
          "200" : {
            "description" : "Successful patch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : { }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login" : {
      "summary" : "Helen User management",
      "post" : {
        "summary" : "Authenticate a user",
        "operationId" : "AuthenticateUser",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "the id of the user to authenticate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Authenticate user POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "password" ],
                "type" : "object",
                "properties" : {
                  "password" : {
                    "type" : "string",
                    "description" : "password of the user"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_16"
        },
        "responses" : {
          "200" : {
            "description" : "Returns an object with at least an `isAuthenticated` field. If login failed, the value of this field is `false`. If login succeeded, the value of this field is `true`, and the rest of the fields of a user-GET response are also included.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_18"
                }
              }
            }
          }
        }
      }
    },
    "/auth/change-password" : {
      "summary" : "Change user password",
      "post" : {
        "summary" : "Change a user password",
        "operationId" : "ChangePassword",
        "requestBody" : {
          "description" : "Authenticate user POST request body",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "email", "password" ],
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string",
                    "description" : "email of the user"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "new password of the user"
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_17"
        },
        "responses" : {
          "200" : {
            "description" : "Returns an object with at least an `isAuthenticated` field. If login failed, the value of this field is `false`. If login succeeded, the value of this field is `true`, and the rest of the fields of a user-GET response are also included.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_18"
                }
              }
            }
          }
        }
      }
    },
    "/auth/token" : {
      "summary" : "Refresh auth token",
      "post" : {
        "summary" : "Refresh authentication token",
        "operationId" : "RefreshToken",
        "requestBody" : {
          "description" : "Refresh authentication token",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "refresh_token" ],
                "type" : "object",
                "properties" : {
                  "refresh_token" : {
                    "type" : "string",
                    "description" : "Token needed to generate new authentication token."
                  }
                }
              }
            }
          },
          "$ref" : "#/components/requestBodies/inline_object_18"
        },
        "responses" : {
          "200" : {
            "description" : "Returns an object with a token, token_expires and refresh_token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_19"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "inline_object_10" : {
        "required" : [ "consortiumName", "consortiumType", "organization" ],
        "type" : "object",
        "properties" : {
          "consortiumName" : {
            "type" : "string",
            "description" : "Name of consortium",
            "format" : "string"
          },
          "consortiumType" : {
            "type" : "string",
            "description" : "Type of consortium",
            "format" : "string"
          },
          "organization" : {
            "type" : "string",
            "description" : "Organization that the consortium is a part of",
            "format" : "UUID"
          }
        }
      },
      "inline_object_12" : {
        "type" : "object",
        "properties" : {
          "OrganizationName" : {
            "type" : "string",
            "description" : "Updating name of the organization"
          }
        }
      },
      "inline_object_11" : {
        "required" : [ "organizationName" ],
        "type" : "object",
        "properties" : {
          "organizationName" : {
            "type" : "string",
            "description" : "Name of organization",
            "format" : "string"
          }
        }
      },
      "inline_object_14" : {
        "required" : [ "consortium", "email", "name", "organization", "password", "role" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "string representing name of this user"
          },
          "email" : {
            "type" : "string",
            "description" : "string representing email of this user"
          },
          "role" : {
            "type" : "string",
            "description" : "string representing role of this user"
          },
          "details" : {
            "$ref" : "#/components/schemas/_users_details"
          },
          "consortium" : {
            "$ref" : "#/components/schemas/_users_consortium_1"
          },
          "organization" : {
            "$ref" : "#/components/schemas/_users_organization_1"
          },
          "password" : {
            "type" : "string",
            "description" : "password of this user"
          }
        }
      },
      "inline_object_13" : {
        "type" : "object",
        "properties" : {
          "task_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "inline_object_16" : {
        "required" : [ "password" ],
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string",
            "description" : "password of the user"
          }
        }
      },
      "inline_object_15" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "new name of the user"
          },
          "email" : {
            "type" : "string",
            "description" : "new email of the user"
          },
          "role" : {
            "type" : "string",
            "description" : "new role of the user"
          },
          "details" : {
            "$ref" : "#/components/schemas/_users_user_id_details"
          }
        }
      },
      "_users_details" : {
        "properties" : {
          "first_name" : {
            "type" : "string",
            "description" : "first name of this user"
          },
          "last_name" : {
            "type" : "string",
            "description" : "last name of this user"
          }
        },
        "example" : {
          "last_name" : "last_name",
          "first_name" : "first_name"
        }
      },
      "inline_response_200_9" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Blockchain ID",
            "format" : "uuid"
          },
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of owning consortium",
            "format" : "uuid"
          },
          "node_list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/_blockchains_node_list"
            }
          }
        },
        "example" : {
          "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "node_list" : [ {
            "ip" : "ip",
            "cert" : "cert",
            "region" : "region",
            "url" : "url",
            "node_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          }, {
            "ip" : "ip",
            "cert" : "cert",
            "region" : "region",
            "url" : "url",
            "node_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          } ]
        }
      },
      "inline_response_200_5" : {
        "required" : [ "id", "jsonrpc" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "jsonrpc" : {
            "type" : "string"
          },
          "result" : {
            "type" : "string"
          },
          "error" : {
            "type" : "string"
          }
        },
        "example" : {
          "result" : "result",
          "id" : 0,
          "jsonrpc" : "jsonrpc",
          "error" : "error"
        }
      },
      "inline_response_202_3" : {
        "properties" : {
          "con_id" : {
            "type" : "string",
            "description" : "Consortium ID",
            "format" : "UUID"
          },
          "consortiumName" : {
            "type" : "string",
            "description" : " Consortium Name",
            "format" : "string"
          }
        },
        "example" : {
          "consortiumName" : "consortiumName",
          "con_id" : "con_id"
        }
      },
      "inline_response_200_6" : {
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "string representing id of this contract"
          },
          "owner" : {
            "type" : "string",
            "description" : "string representing address of the owner of this contract"
          },
          "url" : {
            "type" : "string",
            "description" : "The URI representing this specific contract"
          }
        },
        "example" : {
          "owner" : "owner",
          "contract_id" : "contract_id",
          "url" : "url"
        }
      },
      "inline_response_202_4" : {
        "properties" : {
          "con_id" : {
            "type" : "string",
            "description" : "Consortium ID",
            "format" : "uuid"
          },
          "consortiumName" : {
            "type" : "string",
            "description" : "Consortium Name",
            "format" : "string"
          }
        },
        "example" : {
          "consortiumName" : "consortiumName",
          "con_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_7" : {
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "string representing id of this contract"
          },
          "owner" : {
            "type" : "string",
            "description" : "string representing address of the owner of this contract"
          },
          "versions" : {
            "type" : "array",
            "items" : {
              "properties" : {
                "address" : {
                  "type" : "string",
                  "description" : "string representing address at which this version is deployed"
                },
                "metadata" : {
                  "type" : "object",
                  "description" : "A metadata JSON object about source code of this version generated by solidity compiler"
                },
                "version" : {
                  "type" : "string",
                  "description" : "string representing name of this version"
                },
                "url" : {
                  "type" : "string",
                  "description" : "The URI representing this specific version"
                }
              }
            }
          }
        },
        "example" : {
          "owner" : "owner",
          "versions" : [ "{}", "{}" ],
          "contract_id" : "contract_id"
        }
      },
      "inline_response_202_5" : {
        "properties" : {
          "org_id" : {
            "type" : "string",
            "description" : "Organization ID",
            "format" : "uuid"
          },
          "OrganizationName" : {
            "type" : "string",
            "description" : "Organization Name",
            "format" : "string"
          }
        },
        "example" : {
          "OrganizationName" : "OrganizationName",
          "org_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_8" : {
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "string representing id of this contract"
          },
          "owner" : {
            "type" : "string",
            "description" : "string representing address of the owner of this contract"
          },
          "version" : {
            "type" : "string",
            "description" : "string representing name of this version"
          },
          "metadata" : {
            "type" : "object",
            "description" : "A metadata JSON object about source code of this version generated by solidity compiler"
          },
          "address" : {
            "type" : "string",
            "description" : "string representing address at which this version is deployed"
          },
          "bytecode" : {
            "type" : "string",
            "description" : "string representing compiled bytecode of this version"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "string representing the actual source code of this version"
          }
        },
        "example" : {
          "owner" : "owner",
          "bytecode" : "bytecode",
          "metadata" : "{}",
          "address" : "address",
          "contract_id" : "contract_id",
          "version" : "version",
          "sourcecode" : "sourcecode"
        }
      },
      "_users_organization_1" : {
        "properties" : {
          "organization_id" : {
            "type" : "string",
            "description" : "ID of organization to which this user belongs",
            "format" : "uuid"
          }
        }
      },
      "inline_response_200_1_blocks" : {
        "properties" : {
          "number" : {
            "type" : "integer"
          },
          "hash" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        },
        "example" : {
          "number" : 0,
          "hash" : "hash",
          "url" : "url"
        }
      },
      "inline_response_200_1" : {
        "properties" : {
          "blocks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_1_blocks"
            }
          },
          "next" : {
            "type" : "string"
          }
        },
        "example" : {
          "next" : "next",
          "blocks" : [ {
            "number" : 0,
            "hash" : "hash",
            "url" : "url"
          }, {
            "number" : 0,
            "hash" : "hash",
            "url" : "url"
          } ]
        }
      },
      "_blockchains_node_list" : {
        "properties" : {
          "node_id" : {
            "type" : "string",
            "description" : "Node ID",
            "format" : "uuid"
          },
          "ip" : {
            "type" : "string",
            "description" : "IP address of node"
          },
          "url" : {
            "type" : "string",
            "description" : "EthRPC url of node"
          },
          "cert" : {
            "type" : "string",
            "description" : "SSL certificate to talk to ethrpc"
          },
          "region" : {
            "type" : "string",
            "description" : "Region (SDDC) this node is doploy in"
          }
        },
        "example" : {
          "ip" : "ip",
          "cert" : "cert",
          "region" : "region",
          "url" : "url",
          "node_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_2" : {
        "properties" : {
          "number" : {
            "type" : "integer"
          },
          "hash" : {
            "type" : "string"
          },
          "parentHash" : {
            "type" : "string"
          },
          "nonce" : {
            "type" : "string"
          },
          "size" : {
            "type" : "integer"
          },
          "timestamp" : {
            "type" : "integer",
            "description" : "The proposing node's local system time. (In seconds since the UNIX epoch.)"
          },
          "transactions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "example" : {
          "number" : 0,
          "size" : 6,
          "parentHash" : "parentHash",
          "transactions" : [ "transactions", "transactions" ],
          "nonce" : "nonce",
          "hash" : "hash",
          "timestamp" : 1
        }
      },
      "inline_response_200_3" : {
        "properties" : {
          "hash" : {
            "type" : "string"
          },
          "from" : {
            "type" : "string"
          },
          "to" : {
            "type" : "string"
          },
          "contract_address" : {
            "type" : "string"
          },
          "value" : {
            "type" : "integer"
          },
          "input" : {
            "type" : "string"
          },
          "block_hash" : {
            "type" : "string"
          },
          "block_number" : {
            "type" : "integer"
          },
          "transaction_index" : {
            "type" : "integer"
          },
          "nonce" : {
            "type" : "integer"
          },
          "status" : {
            "type" : "integer"
          }
        },
        "example" : {
          "input" : "input",
          "block_hash" : "block_hash",
          "block_number" : 6,
          "from" : "from",
          "to" : "to",
          "transaction_index" : 1,
          "contract_address" : "contract_address",
          "value" : 0,
          "nonce" : 5,
          "hash" : "hash",
          "status" : 5
        }
      },
      "inline_response_202_1" : {
        "properties" : {
          "task_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        },
        "example" : {
          "task_ids" : [ "046b6c7f-0b8a-43b9-b35d-6489e6daee91", "046b6c7f-0b8a-43b9-b35d-6489e6daee91" ]
        }
      },
      "inline_response_200_4" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "params" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        },
        "example" : {
          "name" : "name",
          "params" : [ "{}", "{}" ]
        }
      },
      "inline_response_202_2" : {
        "properties" : {
          "task_id" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "example" : {
          "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_11" : {
        "properties" : {
          "consortiumId" : {
            "type" : "string",
            "description" : " Consortium ID",
            "format" : "uuid"
          },
          "organizationName" : {
            "type" : "string",
            "description" : "Name of Consortium",
            "format" : "string"
          }
        },
        "example" : {
          "organizationName" : "organizationName",
          "consortiumId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_10" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Blockchain ID",
            "format" : "uuid"
          },
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of owning consortium",
            "format" : "uuid"
          },
          "ip_list" : {
            "type" : "string",
            "description" : "Addresses of nodes in this blockchain"
          },
          "rpc_urls" : {
            "type" : "string",
            "description" : "List of addreses with node names"
          }
        },
        "example" : {
          "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "ip_list" : "ip_list",
          "rpc_urls" : "rpc_urls"
        }
      },
      "inline_response_200_13" : {
        "properties" : {
          "orgId" : {
            "type" : "string",
            "description" : " Organization ID",
            "format" : "uuid"
          },
          "organizationName" : {
            "type" : "string",
            "description" : "Name of organization",
            "format" : "string"
          }
        },
        "example" : {
          "organizationName" : "organizationName",
          "orgId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_12" : {
        "properties" : {
          "orgId" : {
            "type" : "string",
            "description" : " Consortium ID",
            "format" : "uuid"
          },
          "organizationName" : {
            "type" : "string",
            "description" : "Name of Consortium",
            "format" : "string"
          }
        },
        "example" : {
          "organizationName" : "organizationName",
          "orgId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_19" : {
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Token used for authentication."
          },
          "refresh_token" : {
            "type" : "string",
            "description" : "Token used to regenerate a token, token_expires and refresh_token"
          },
          "token_expires" : {
            "type" : "string",
            "description" : "Amount of time till your token expires."
          }
        },
        "example" : {
          "refresh_token" : "refresh_token",
          "token_expires" : "token_expires",
          "token" : "token"
        }
      },
      "inline_response_200_18" : {
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "integer value representing ID of this user",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "description" : "string representing name of this user"
          },
          "email" : {
            "type" : "string",
            "description" : "string representing email of this user"
          },
          "role" : {
            "type" : "string",
            "description" : "string representing role of this user"
          },
          "last_login" : {
            "type" : "integer",
            "description" : "integer value representing the time (in milliseconds since epoch) when this user last logged in"
          },
          "details" : {
            "$ref" : "#/components/schemas/_users_details"
          },
          "consortium" : {
            "$ref" : "#/components/schemas/_users_consortium"
          },
          "organization" : {
            "$ref" : "#/components/schemas/_users_organization"
          },
          "isAuthenticated" : {
            "type" : "boolean",
            "description" : "True if login succeeded. False otherwise."
          }
        },
        "example" : {
          "role" : "role",
          "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "last_login" : 0,
          "consortium" : {
            "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "consortium_name" : "consortium_name"
          },
          "organization" : {
            "organization_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "organization_name" : "organization_name"
          },
          "name" : "name",
          "details" : {
            "last_name" : "last_name",
            "first_name" : "first_name"
          },
          "isAuthenticated" : true,
          "email" : "email"
        }
      },
      "inline_response_200_15" : {
        "properties" : {
          "states" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_14"
            }
          }
        },
        "example" : {
          "states" : [ {
            "resource_link" : "http://example.com/aeiou",
            "resource_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "state" : "RUNNING",
            "message" : "message"
          }, {
            "resource_link" : "http://example.com/aeiou",
            "resource_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "state" : "RUNNING",
            "message" : "message"
          } ]
        }
      },
      "inline_response_200_14" : {
        "properties" : {
          "task_id" : {
            "type" : "string",
            "description" : "Task ID",
            "format" : "uuid"
          },
          "state" : {
            "type" : "string",
            "description" : "Current state of of the task",
            "enum" : [ "RUNNING", "SUCCEEDED", "FAILED" ]
          },
          "message" : {
            "type" : "string",
            "description" : "Additional information from the task"
          },
          "resource_id" : {
            "type" : "string",
            "description" : "The resoruce created or updated by this task.  May not be accurate until state is FAILED or SUCCEEDED.",
            "format" : "uuid"
          },
          "resource_link" : {
            "type" : "string",
            "description" : "Link to the resource created or updated by this task.",
            "format" : "uri"
          }
        },
        "example" : {
          "resource_link" : "http://example.com/aeiou",
          "resource_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "state" : "RUNNING",
          "message" : "message"
        }
      },
      "inline_response_200_17" : {
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "User ID of newly created user",
            "format" : "uuid"
          }
        },
        "example" : {
          "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_response_200_16" : {
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "UUID value representing ID of this user",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "description" : "string representing name of this user"
          },
          "email" : {
            "type" : "string",
            "description" : "string representing email of this user"
          },
          "role" : {
            "type" : "string",
            "description" : "string representing role of this user"
          },
          "last_login" : {
            "type" : "integer",
            "description" : "integer value representing the time (in milliseconds since epoch) when this user last logged in"
          },
          "details" : {
            "$ref" : "#/components/schemas/_users_details"
          },
          "consortium" : {
            "$ref" : "#/components/schemas/_users_consortium"
          },
          "organization" : {
            "$ref" : "#/components/schemas/_users_organization"
          }
        },
        "example" : {
          "role" : "role",
          "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "last_login" : 0,
          "consortium" : {
            "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "consortium_name" : "consortium_name"
          },
          "organization" : {
            "organization_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "organization_name" : "organization_name"
          },
          "name" : "name",
          "details" : {
            "last_name" : "last_name",
            "first_name" : "first_name"
          },
          "email" : "email"
        }
      },
      "_users_organization" : {
        "properties" : {
          "organization_id" : {
            "type" : "string",
            "description" : "ID of organization to which this user belongs",
            "format" : "uuid"
          },
          "organization_name" : {
            "type" : "string",
            "description" : "name of organization to which this user belongs"
          }
        },
        "example" : {
          "organization_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "organization_name" : "organization_name"
        }
      },
      "inline_response_200" : {
        "properties" : {
          "hostname" : {
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "millis_since_last_message" : {
            "type" : "integer"
          },
          "millis_since_last_message_threshold" : {
            "type" : "integer"
          },
          "rpc_url" : {
            "type" : "string",
            "format" : "url"
          }
        },
        "example" : {
          "rpc_url" : "http://example.com/aeiou",
          "hostname" : "hostname",
          "address" : "address",
          "millis_since_last_message" : 0,
          "millis_since_last_message_threshold" : 6,
          "status" : "status"
        }
      },
      "inline_response_202" : {
        "properties" : {
          "task_id" : {
            "type" : "string",
            "description" : "Task ID",
            "format" : "uuid"
          }
        },
        "example" : {
          "task_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "inline_object_1" : {
        "required" : [ "compiler_version", "constructor_params", "contract_id", "contract_name", "from", "sourcecode", "version" ],
        "type" : "object",
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "string representing contract id"
          },
          "version" : {
            "type" : "string",
            "description" : "string representing version number of this contract"
          },
          "from" : {
            "type" : "string",
            "description" : "string representing owners address"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "string representing solidity source code of this version"
          },
          "contract_name" : {
            "type" : "string",
            "description" : "string representing contract name you used to deploy the contract"
          },
          "constructor_params" : {
            "type" : "string",
            "description" : "string representing constructor parameters needed to deploy this contract, if your contract does not require constructor parameters, set this to \"\""
          },
          "compiler_version" : {
            "type" : "string",
            "description" : "string representing solc version you used to deploy the contract"
          },
          "is_optimize" : {
            "type" : "boolean",
            "description" : "True if using the optimizer. False otherwise"
          },
          "runs" : {
            "type" : "string",
            "description" : "string representing optimize for how many times you intend to run the code"
          }
        }
      },
      "_users_consortium" : {
        "properties" : {
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of consortium to which this user belongs",
            "format" : "uuid"
          },
          "consortium_name" : {
            "type" : "string",
            "description" : "name of consortium to which this user belongs"
          }
        },
        "example" : {
          "consortium_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "consortium_name" : "consortium_name"
        }
      },
      "inline_object_9" : {
        "required" : [ "consortiumName", "consortiumType", "organization" ],
        "type" : "object",
        "properties" : {
          "consortiumName" : {
            "type" : "string",
            "description" : "Name of consortium",
            "format" : "string"
          },
          "consortiumType" : {
            "type" : "string",
            "description" : "Type of consortium",
            "format" : "string"
          },
          "organization" : {
            "type" : "string",
            "description" : "Organization that the consortium is a part of",
            "format" : "UUID"
          }
        }
      },
      "inline_object_8" : {
        "required" : [ "compiler_version", "contract_id", "contract_name", "sourcecode" ],
        "type" : "object",
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "string representing contract name"
          },
          "compiler_version" : {
            "type" : "string",
            "description" : "string representing solc version you used to deploy the contract"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "string representing solidity source code of this version"
          },
          "contract_name" : {
            "type" : "string",
            "description" : "string representing contract name you used to deploy the contract"
          },
          "is_optimize" : {
            "type" : "boolean",
            "description" : "True if using the optimizer. False otherwise"
          },
          "runs" : {
            "type" : "string",
            "description" : "string representing optimize for how many times you intend to run the code"
          }
        }
      },
      "inline_object_7" : {
        "required" : [ "compiler_version", "contract_id", "contract_name", "from", "sourcecode", "version" ],
        "type" : "object",
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "string representing contract id"
          },
          "version" : {
            "type" : "string",
            "description" : "string representing version number of this contract"
          },
          "from" : {
            "type" : "string",
            "description" : "string representing owners address"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "string representing solidity source code of this version"
          },
          "contract_name" : {
            "type" : "string",
            "description" : "string representing contract name you used to deploy the contract"
          },
          "constructor_params" : {
            "type" : "string",
            "description" : "string representing constructor parameters needed to deploy this contract, if your contract does not require constructor parameters, set this to \"\""
          },
          "compiler_version" : {
            "type" : "string",
            "description" : "string representing solc version you used to deploy the contract"
          },
          "is_optimize" : {
            "type" : "boolean",
            "description" : "True if using the optimizer. False otherwise"
          },
          "runs" : {
            "type" : "string",
            "description" : "string representing optimize for how many times you intend to run the code"
          }
        }
      },
      "inline_object_6" : {
        "required" : [ "id", "jsonrpc", "method", "params" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "jsonrpc" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          },
          "params" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "inline_object_5" : {
        "type" : "object",
        "properties" : {
          "node_ips" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "inline_object_4" : {
        "type" : "object",
        "properties" : {
          "ip_list" : {
            "type" : "string",
            "description" : "comma separated list of addresses of blockchain nodes"
          },
          "rpc_urls" : {
            "type" : "string",
            "description" : "string represent url map, comma separated list of hostname=url"
          }
        }
      },
      "inline_object_3" : {
        "required" : [ "c_count", "concortium_id", "deployment_type", "f_count" ],
        "type" : "object",
        "properties" : {
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of owning consortium",
            "format" : "uuid"
          },
          "f_count" : {
            "type" : "integer",
            "description" : "Number of f nodes, cluster size will be 3f +2c + 1"
          },
          "c_count" : {
            "type" : "integer",
            "description" : "Number of c nodes, cluster size will be 3f +2c + 1"
          },
          "deployment_type" : {
            "type" : "string",
            "description" : "FIXED or UNSPECIFIED, determines site locations",
            "enum" : [ "FIXED", "UNSPECIFIED" ]
          },
          "site_ids" : {
            "type" : "array",
            "description" : "List of site ids.  Required if deployment type is fixed",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "inline_object_2" : {
        "required" : [ "compiler_version", "contract_id", "contract_name", "sourcecode" ],
        "type" : "object",
        "properties" : {
          "contract_id" : {
            "type" : "string",
            "description" : "string representing contract name"
          },
          "compiler_version" : {
            "type" : "string",
            "description" : "string representing solc version you used to deploy the contract"
          },
          "sourcecode" : {
            "type" : "string",
            "description" : "string representing solidity source code of this version"
          },
          "contract_name" : {
            "type" : "string",
            "description" : "string representing contract name you used to deploy the contract"
          },
          "is_optimize" : {
            "type" : "boolean",
            "description" : "True if using the optimizer. False otherwise"
          },
          "runs" : {
            "type" : "string",
            "description" : "string representing optimize for how many times you intend to run the code"
          }
        }
      },
      "_users_user_id_details" : {
        "properties" : {
          "first_name" : {
            "type" : "string",
            "description" : "new first name of the user"
          },
          "last_name" : {
            "type" : "string",
            "description" : "new last name of the user"
          }
        }
      },
      "inline_object_18" : {
        "required" : [ "refresh_token" ],
        "type" : "object",
        "properties" : {
          "refresh_token" : {
            "type" : "string",
            "description" : "Token needed to generate new authentication token."
          }
        }
      },
      "inline_object_17" : {
        "required" : [ "email", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "email of the user"
          },
          "password" : {
            "type" : "string",
            "description" : "new password of the user"
          }
        }
      },
      "_users_consortium_1" : {
        "properties" : {
          "consortium_id" : {
            "type" : "string",
            "description" : "ID of consortium to which this user belongs",
            "format" : "uuid"
          }
        }
      },
      "inline_object" : {
        "required" : [ "id", "jsonrpc", "method", "params" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "jsonrpc" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          },
          "params" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "requestBodies" : {
      "inline_object_1" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_1"
            }
          }
        }
      },
      "inline_object_9" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_9"
            }
          }
        }
      },
      "inline_object_10" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_10"
            }
          }
        },
        "required" : true
      },
      "inline_object_8" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_8"
            }
          }
        },
        "required" : true
      },
      "inline_object_7" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_7"
            }
          }
        }
      },
      "inline_object_12" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_12"
            }
          }
        },
        "required" : true
      },
      "inline_object_6" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_6"
            }
          }
        }
      },
      "inline_object_11" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_11"
            }
          }
        },
        "required" : true
      },
      "inline_object_5" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_5"
            }
          }
        },
        "required" : true
      },
      "inline_object_14" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_14"
            }
          }
        },
        "required" : true
      },
      "inline_object_4" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_4"
            }
          }
        }
      },
      "inline_object_13" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_13"
            }
          }
        },
        "required" : true
      },
      "inline_object_3" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_3"
            }
          }
        }
      },
      "inline_object_16" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_16"
            }
          }
        }
      },
      "inline_object_2" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_2"
            }
          }
        }
      },
      "inline_object_15" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_15"
            }
          }
        },
        "required" : true
      },
      "inline_object_18" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_18"
            }
          }
        }
      },
      "inline_object_17" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_17"
            }
          }
        }
      },
      "inline_object" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object"
            }
          }
        }
      }
    }
  }
}