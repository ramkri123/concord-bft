### VMware Log Intelligence Config

## SOURCE ##

<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>


## FILTERS ##

# Picks up JSON records emitted by Log4j, separated by \n
# concat by message field - this means that when Fluentd adds a "log" field wrapper,
# it does so for the entire record once, not individual key-values in the record.
<filter ethrpc.**>
  @type concat
  key message
  multiline_end_regexp /\n$/
</filter>

# 1. Removes log key, emits nested key-values at parent level
# 2. Skips parsing if no match
<filter ethrpc.**>
  @type parser
  key_name log
  reserve_data true
  remove_key_name_field true
  emit_invalid_record_to_error false
  <parse>
    @type multi_format
    <pattern>
      format json
    </pattern>
    <pattern>
      format none
    </pattern>
  </parse>
</filter>

# Fluentd throws a lot of parsing errors sometimes, which need to be skipped
<filter ethrpc.**>
  @type grep
  <or>
    <regexp>
      key loggerName
      pattern /ethLogger/
    </regexp>
    <regexp>
      key partial_message
      pattern /true/
    </regexp>
  </or>
</filter>

# Original filter logic for *.** tag pattern has now been changed to match helen tag
<filter helen.**>
  @type parser
  key_name log

  <parse>
    @type multi_format
    # Parse Eth Logs
    <pattern>
      format regexp
      expression /^\[(?<level>[^\]]*)\] \[(?<logtime>[^\]]*)\] \[thread=(?<thread>[^\]]*)\] \[function=(?<function>[^ ]*)\] \[message=(?<message>.*)\] \[organization_id=(?<organization_id>[^ ]*)\] \[consortium_id=(?<consortium_id>[^ ]*)\] \[uri=(?<uri>[^ ]*)\] \[source=(?<source>[^ ]*)\] \[eth_request_id=(?<eth_request_id>[^ ]*)\] \[method=(?<method>[^ ]*)\]$/
      time_key logtime
      time_format %Y-%m-%d %H:%M:%S
    </pattern>
    # Parse standard format
    <pattern>
      format regexp
      expression /^\[(?<level>[^\]]*)\] \[(?<logtime>[^\]]*)\] \[thread=(?<thread>[^\]]*)\] \[function=(?<function>[^ ]*)\] \[message=(?<message>.*)\]$/
      time_key logtime
      time_format %Y-%m-%d %H:%M:%S
    </pattern>
  </parse>

</filter>

# Apply only to helen logs
<filter helen.**>
  @type record_transformer

  <record>
    hostname ${hostname}
    appname helen
  </record>
</filter>


## OUTPUT ##

# Push EthRpc logs to Log Intelligence and Stdout
<match ethrpc.**>
  @type copy

  # Log Intelligence
  <store>
    @type http_ext
    endpoint_url https://data.mgmt.cloud.vmware.com/le-mans/v1/streams/ingestion-pipeline-stream
    http_method post
    serializer json
    rate_limit_msec 0
    raise_on_error false
    raise_on_http_failure true
    authentication none
    use_ssl true
    verify_ssl false

    <headers>
      Authorization Bearer <ADD-LOGINTELLIGENCE-KEY-HERE>
      Content-Type application/json
      format json
      structure default
    </headers>
  </store>

  # Stdout
  <store>
    @type stdout
    format pretty_json
  </store>
</match>

# All other Helen logs
<match helen.**>
  @type http_ext
  endpoint_url https://data.mgmt.cloud.vmware.com/le-mans/v1/streams/ingestion-pipeline-stream
  http_method  post
  serializer json
  rate_limit_msec 0
  raise_on_error false
  raise_on_http_failure true
  authentication none
  use_ssl true
  verify_ssl false

  <headers>
    Authorization Bearer <ADD-LOGINTELLIGENCE-KEY-HERE>
    Content-Type application/json
    format syslog
    structure default
  </headers>
</match>
