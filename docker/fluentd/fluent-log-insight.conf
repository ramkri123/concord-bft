### VMware Blockchain - Log Insight Configuration

## SOURCE ##

<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>


## FILTERS ##

# Picks up JSON records emitted by Log4j, separated by \n
# concat by message field - this means that when Fluentd adds a "log" field wrapper,
# it does so for the entire record once, not individual key-values in the record.
<filter ethrpc.**>
  @type concat
  key message
  multiline_end_regexp /\n$/
</filter>

# 1. Removes log key, emits nested key-values at parent level
# 2. Skips parsing if no match
<filter ethrpc.**>
  @type parser
  key_name log
  reserve_data true
  remove_key_name_field true
  emit_invalid_record_to_error false
  <parse>
    @type multi_format
    <pattern>
      format json
    </pattern>
    <pattern>
      format none
    </pattern>
  </parse>
</filter>

# Fluentd throws a lot of parsing errors sometimes, which need to be skipped
<filter ethrpc.**>
  @type grep
  <or>
    <regexp>
      key loggerName
      pattern /ethLogger/
    </regexp>
    <regexp>
      key partial_message
      pattern /true/
    </regexp>
  </or>
</filter>

# Original filter logic for *.** tag pattern has now been changed to match helen tag
<filter helen.**>
  @type parser
  key_name log

  <parse>
    @type multi_format
    # Parse Eth Logs
    <pattern>
      format regexp
      expression /^\[(?<level>[^\]]*)\] \[(?<logtime>[^\]]*)\] \[thread=(?<thread>[^\]]*)\] \[function=(?<function>[^ ]*)\] \[message=(?<message>.*)\] \[organization_id=(?<organization_id>[^ ]*)\] \[consortium_id=(?<consortium_id>[^ ]*)\] \[uri=(?<uri>[^ ]*)\] \[source=(?<source>[^ ]*)\] \[eth_request_id=(?<eth_request_id>[^ ]*)\] \[method=(?<method>[^ ]*)\]$/
      time_key logtime
      time_format %Y-%m-%d %H:%M:%S
    </pattern>
    # Parse standard format
    <pattern>
      format regexp
      expression /^\[(?<level>[^\]]*)\] \[(?<logtime>[^\]]*)\] \[thread=(?<thread>[^\]]*)\] \[function=(?<function>[^ ]*)\] \[message=(?<message>.*)\]$/
      time_key logtime
      time_format %Y-%m-%d %H:%M:%S
    </pattern>
  </parse>

</filter>

# Apply only to helen logs
<filter helen.**>
  @type record_transformer

  <record>
    hostname ${hostname}
    appname helen
  </record>
</filter>

# Apply only to DAML logs
<filter daml*.**>
  @type parser
  key_name log
  reserve_data true
  remove_key_name_field true
  emit_invalid_record_to_error false
  <parse>
    @type multi_format
    <pattern>
      format regexp
      # Parse out logtime...level...method...message from the log
      # Additional non-capturing groups are to remove ANSI color characters, e.g., \u001b[34mINFO \u001b[0;39m
      expression /^(?<logtime>[^ ]*)( )(\e\[[0-9;]*m*)(?<level>[^ \\]*)( *)(\e\[[0-9;]*m*)( )(\e\[[0-9;]*m*)(?<method>[^ \\]*)( *)(\e\[[0-9;]*m*)( - )(?<message>[^\n]*)$/
    </pattern>
    <pattern>
      format none
    </pattern>
  </parse>
</filter>

<filter daml_ledger_api.**>
  @type record_transformer
  <record>
    appname daml_ledger_api
  </record>
</filter>

<filter daml_execution_engine.**>
  @type record_transformer
  <record>
    appname daml_execution_engine
  </record>
</filter>

# Apply only to Concord logs
<filter concord.**>
  @type parser
  key_name log
  reserve_data true
  remove_key_name_field true
  emit_invalid_record_to_error false
  <parse>
    @type multi_format
    <pattern>
      format regexp
      # Log pattern format: %d{%FT%H:%M:%S.%q} [%t] %-5p %c{2} %%%x%% %m [%l]%n
      expression /^(?<logtime>[^ ]+)( \[)(?<thread_id>[\d]+)(\] )(?<level>[^ ]+)( +)(?<logger>[^ ]+)( %% )(?<message>.+?(?= \[))( \[)(?<method>[^\[]+)(\])$/
    </pattern>
    <pattern>
      format none
    </pattern>
  </parse>
</filter>

<filter concord.**>
  @type record_transformer
  <record>
    appname concord
  </record>
</filter>

# Filter out "source: stdout" key-value pair
# It's auto-generated, and "source" is a reserved keyword in Log Insight; POST to Log Insight throws error
<filter *.**>
  @type record_transformer
  remove_keys source
</filter>

## OUTPUT ##

# Push matching logs to Log Insight and Stdout
<match ethrpc.** helen.** daml*.** concord.**>
  @type copy

  # Log Insight
  <store>
    @type vmware_loginsight
    scheme http
    ssl_verify false
    host LOG_INSIGHT_HOST
    port LOG_INSIGHT_PORT
    path api/v1/events/ingest
    agent_id LOG_INSIGHT_AGENT_ID   # default 0
    http_method post
    serializer json
    rate_limit_msec 0
    raise_on_error false
    include_tag_key false
  </store>

  # Stdout
  <store>
    @type stdout
    format pretty_json
  </store>
</match>
