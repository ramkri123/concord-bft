##########################################################
### VMware Blockchain - Log Intelligence Configuration ###
##########################################################


############################################
#                 SOURCE                   #
############################################

<source>
  @type tail
  <parse>
    @type json
  </parse>
  path /var/lib/docker/containers/*/*-json.log
  pos_file /var/log/fluentd-docker.pos
  read_from_head true
  tag docker.*
  refresh_interval 5s
  enable_stat_watcher false
</source>


############################################
#                FILTERS                   #
############################################

# Handle single line JSON from Docker containers
<filter docker.var.lib.docker.containers.**.*>
  @type concat
  key message
  multiline_end_regexp /\n$/
</filter>

# Handle Docker logs split in several parts (using partial_message), and do not add new line between parts
<filter docker.var.lib.docker.containers.**.*>
  @type concat
  key message
  partial_key partial_message
  partial_value true
  separator ""
</filter>

<filter docker.var.lib.docker.containers.**.*>
  @type parser
  key_name log
  reserve_data true
  remove_key_name_field true
  emit_invalid_record_to_error false

  <parse>
    @type multi_format

    # Concord
    <pattern>
      format regexp
      # Log pattern format: %d{%FT%H:%M:%S.%q} [%t] %-5p %c{2} %%%x%% %m [%l]%n
      expression /^(?<logtime>[^ ]+)( \[)(?<thread_id>[\d]+)(\] )(?<level>[^ ]+)( +)(?<logger>[^ ]+)( %% )(?<message>.+?(?= \[))( \[)(?<method>[^\[]+)(\])$/
    </pattern>

    # DAML services
    <pattern>
      format regexp
      # Log pattern format: logtime...level...method...message
      # Additional non-capturing groups are to remove ANSI color characters, e.g., \u001b[34mINFO \u001b[0;39m
      expression /^(?<logtime>[^ ]*)( )(\e\[[0-9;]*m*)(?<level>[^ \\]*)( *)(\e\[[0-9;]*m*)( )(\e\[[0-9;]*m*)(?<method>[^ \\]*)( *)(\e\[[0-9;]*m*)( - )(?<message>[^\n]*)$/
    </pattern>

    # EthRpc
    <pattern>
      format json
    </pattern>

    <pattern>
      format none
    </pattern>

  </parse>
</filter>

# Remove Ethrpc initialization messages
<filter docker.var.lib.docker.containers.**.*>
  @type grep
  <or>
    <exclude>
      key loggerName
      pattern /^.*springframework.*$/
    </exclude>
    <exclude>
      key uri
      pattern /^.*ctx:uri.*&/
    </exclude>
  </or>
</filter>

# Add fields in each log before pushing it to output
# service_name is obtained from config.v2.json which is the container name
# consortium_id and replica_id to be injected from environment variables as part of deployment
# Filter out "source: stdout" key-value pair
# It's auto-generated, and "source" is a reserved keyword in Log Insight; POST to Log Insight throws error
<filter docker.var.lib.docker.containers.**.*>
  @type record_modifier
  <record>
    # Container name is defined in 'Name' field in container's config.v2.json. e.g /concord
    # strip off the first character /
    service_name ${id = tag_parts[5]; JSON.parse(IO.read("/var/lib/docker/containers/#{id}/config.v2.json"))['Name'][1..-1]}
    consortium_id "#{ENV['CONSORTIUM_ID']}"
    replica_id "#{ENV['REPLICA_ID']}"
  </record>
  remove_keys source,stream
</filter>


############################################
#                OUTPUT                    #
############################################

# Rename tag to service name
<match docker.var.lib.docker.containers.**.*>
  @type rewrite_tag_filter
  <rule>
    key service_name
    pattern /^(.+)$/
    tag $1
  </rule>
</match>

# Push matching logs to Log Intelligence
<match *concord* *ethrpc* *daml*>

  @type http
  endpoint LINT_ENDPOINT_URL
  open_timeout 120
  content_type application/json
  http_method post
  headers {"Authorization":"Bearer LINT_AUTHORIZATION_BEARER", "structure":"simple"}
  tls_verify_mode none
  <buffer>
    chunk_limit_records 300
    flush_interval 3s
    flush_at_shutdown true
    flush_thread_count 4
    overflow_action drop_oldest_chunk
    retry_max_times 4
  </buffer>

</match>
